
XEDOLINE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000314c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003258  08003258  00013258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003284  08003284  00013284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003288  08003288  00013288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000044  20000000  0800328c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001ac  20000044  080032d0  00020044  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200001f0  080032d0  000201f0  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000caf6  00000000  00000000  0002006d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001c6c  00000000  00000000  0002cb63  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000079ef  00000000  00000000  0002e7cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b80  00000000  00000000  000361c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b18  00000000  00000000  00036d40  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00014590  00000000  00000000  00037858  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000088d4  00000000  00000000  0004bde8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00071be2  00000000  00000000  000546bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  000c629e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002084  00000000  00000000  000c631c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000044 	.word	0x20000044
 8000128:	00000000 	.word	0x00000000
 800012c:	08003240 	.word	0x08003240

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000048 	.word	0x20000048
 8000148:	08003240 	.word	0x08003240

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028a:	f1a4 0401 	sub.w	r4, r4, #1
 800028e:	d1e9      	bne.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_frsub>:
 8000988:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800098c:	e002      	b.n	8000994 <__addsf3>
 800098e:	bf00      	nop

08000990 <__aeabi_fsub>:
 8000990:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000994 <__addsf3>:
 8000994:	0042      	lsls	r2, r0, #1
 8000996:	bf1f      	itttt	ne
 8000998:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800099c:	ea92 0f03 	teqne	r2, r3
 80009a0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009a8:	d06a      	beq.n	8000a80 <__addsf3+0xec>
 80009aa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009ae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b2:	bfc1      	itttt	gt
 80009b4:	18d2      	addgt	r2, r2, r3
 80009b6:	4041      	eorgt	r1, r0
 80009b8:	4048      	eorgt	r0, r1
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	bfb8      	it	lt
 80009be:	425b      	neglt	r3, r3
 80009c0:	2b19      	cmp	r3, #25
 80009c2:	bf88      	it	hi
 80009c4:	4770      	bxhi	lr
 80009c6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d2:	bf18      	it	ne
 80009d4:	4240      	negne	r0, r0
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009da:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009de:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e2:	bf18      	it	ne
 80009e4:	4249      	negne	r1, r1
 80009e6:	ea92 0f03 	teq	r2, r3
 80009ea:	d03f      	beq.n	8000a6c <__addsf3+0xd8>
 80009ec:	f1a2 0201 	sub.w	r2, r2, #1
 80009f0:	fa41 fc03 	asr.w	ip, r1, r3
 80009f4:	eb10 000c 	adds.w	r0, r0, ip
 80009f8:	f1c3 0320 	rsb	r3, r3, #32
 80009fc:	fa01 f103 	lsl.w	r1, r1, r3
 8000a00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a04:	d502      	bpl.n	8000a0c <__addsf3+0x78>
 8000a06:	4249      	negs	r1, r1
 8000a08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a10:	d313      	bcc.n	8000a3a <__addsf3+0xa6>
 8000a12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a16:	d306      	bcc.n	8000a26 <__addsf3+0x92>
 8000a18:	0840      	lsrs	r0, r0, #1
 8000a1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a1e:	f102 0201 	add.w	r2, r2, #1
 8000a22:	2afe      	cmp	r2, #254	; 0xfe
 8000a24:	d251      	bcs.n	8000aca <__addsf3+0x136>
 8000a26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a2e:	bf08      	it	eq
 8000a30:	f020 0001 	biceq.w	r0, r0, #1
 8000a34:	ea40 0003 	orr.w	r0, r0, r3
 8000a38:	4770      	bx	lr
 8000a3a:	0049      	lsls	r1, r1, #1
 8000a3c:	eb40 0000 	adc.w	r0, r0, r0
 8000a40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a44:	f1a2 0201 	sub.w	r2, r2, #1
 8000a48:	d1ed      	bne.n	8000a26 <__addsf3+0x92>
 8000a4a:	fab0 fc80 	clz	ip, r0
 8000a4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a52:	ebb2 020c 	subs.w	r2, r2, ip
 8000a56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5a:	bfaa      	itet	ge
 8000a5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a60:	4252      	neglt	r2, r2
 8000a62:	4318      	orrge	r0, r3
 8000a64:	bfbc      	itt	lt
 8000a66:	40d0      	lsrlt	r0, r2
 8000a68:	4318      	orrlt	r0, r3
 8000a6a:	4770      	bx	lr
 8000a6c:	f092 0f00 	teq	r2, #0
 8000a70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a74:	bf06      	itte	eq
 8000a76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7a:	3201      	addeq	r2, #1
 8000a7c:	3b01      	subne	r3, #1
 8000a7e:	e7b5      	b.n	80009ec <__addsf3+0x58>
 8000a80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a8e:	d021      	beq.n	8000ad4 <__addsf3+0x140>
 8000a90:	ea92 0f03 	teq	r2, r3
 8000a94:	d004      	beq.n	8000aa0 <__addsf3+0x10c>
 8000a96:	f092 0f00 	teq	r2, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	4608      	moveq	r0, r1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea90 0f01 	teq	r0, r1
 8000aa4:	bf1c      	itt	ne
 8000aa6:	2000      	movne	r0, #0
 8000aa8:	4770      	bxne	lr
 8000aaa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000aae:	d104      	bne.n	8000aba <__addsf3+0x126>
 8000ab0:	0040      	lsls	r0, r0, #1
 8000ab2:	bf28      	it	cs
 8000ab4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ab8:	4770      	bx	lr
 8000aba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000abe:	bf3c      	itt	cc
 8000ac0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bxcc	lr
 8000ac6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ace:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad2:	4770      	bx	lr
 8000ad4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ad8:	bf16      	itet	ne
 8000ada:	4608      	movne	r0, r1
 8000adc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae0:	4601      	movne	r1, r0
 8000ae2:	0242      	lsls	r2, r0, #9
 8000ae4:	bf06      	itte	eq
 8000ae6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aea:	ea90 0f01 	teqeq	r0, r1
 8000aee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af2:	4770      	bx	lr

08000af4 <__aeabi_ui2f>:
 8000af4:	f04f 0300 	mov.w	r3, #0
 8000af8:	e004      	b.n	8000b04 <__aeabi_i2f+0x8>
 8000afa:	bf00      	nop

08000afc <__aeabi_i2f>:
 8000afc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b00:	bf48      	it	mi
 8000b02:	4240      	negmi	r0, r0
 8000b04:	ea5f 0c00 	movs.w	ip, r0
 8000b08:	bf08      	it	eq
 8000b0a:	4770      	bxeq	lr
 8000b0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b10:	4601      	mov	r1, r0
 8000b12:	f04f 0000 	mov.w	r0, #0
 8000b16:	e01c      	b.n	8000b52 <__aeabi_l2f+0x2a>

08000b18 <__aeabi_ul2f>:
 8000b18:	ea50 0201 	orrs.w	r2, r0, r1
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f04f 0300 	mov.w	r3, #0
 8000b24:	e00a      	b.n	8000b3c <__aeabi_l2f+0x14>
 8000b26:	bf00      	nop

08000b28 <__aeabi_l2f>:
 8000b28:	ea50 0201 	orrs.w	r2, r0, r1
 8000b2c:	bf08      	it	eq
 8000b2e:	4770      	bxeq	lr
 8000b30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__aeabi_l2f+0x14>
 8000b36:	4240      	negs	r0, r0
 8000b38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b3c:	ea5f 0c01 	movs.w	ip, r1
 8000b40:	bf02      	ittt	eq
 8000b42:	4684      	moveq	ip, r0
 8000b44:	4601      	moveq	r1, r0
 8000b46:	2000      	moveq	r0, #0
 8000b48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b4c:	bf08      	it	eq
 8000b4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b56:	fabc f28c 	clz	r2, ip
 8000b5a:	3a08      	subs	r2, #8
 8000b5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b60:	db10      	blt.n	8000b84 <__aeabi_l2f+0x5c>
 8000b62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b66:	4463      	add	r3, ip
 8000b68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b6c:	f1c2 0220 	rsb	r2, r2, #32
 8000b70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b74:	fa20 f202 	lsr.w	r2, r0, r2
 8000b78:	eb43 0002 	adc.w	r0, r3, r2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f102 0220 	add.w	r2, r2, #32
 8000b88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b8c:	f1c2 0220 	rsb	r2, r2, #32
 8000b90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b94:	fa21 f202 	lsr.w	r2, r1, r2
 8000b98:	eb43 0002 	adc.w	r0, r3, r2
 8000b9c:	bf08      	it	eq
 8000b9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba2:	4770      	bx	lr

08000ba4 <__aeabi_fmul>:
 8000ba4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ba8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bac:	bf1e      	ittt	ne
 8000bae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb2:	ea92 0f0c 	teqne	r2, ip
 8000bb6:	ea93 0f0c 	teqne	r3, ip
 8000bba:	d06f      	beq.n	8000c9c <__aeabi_fmul+0xf8>
 8000bbc:	441a      	add	r2, r3
 8000bbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc2:	0240      	lsls	r0, r0, #9
 8000bc4:	bf18      	it	ne
 8000bc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bca:	d01e      	beq.n	8000c0a <__aeabi_fmul+0x66>
 8000bcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000bdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be4:	bf3e      	ittt	cc
 8000be6:	0049      	lslcc	r1, r1, #1
 8000be8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bec:	005b      	lslcc	r3, r3, #1
 8000bee:	ea40 0001 	orr.w	r0, r0, r1
 8000bf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bf6:	2afd      	cmp	r2, #253	; 0xfd
 8000bf8:	d81d      	bhi.n	8000c36 <__aeabi_fmul+0x92>
 8000bfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c02:	bf08      	it	eq
 8000c04:	f020 0001 	biceq.w	r0, r0, #1
 8000c08:	4770      	bx	lr
 8000c0a:	f090 0f00 	teq	r0, #0
 8000c0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c12:	bf08      	it	eq
 8000c14:	0249      	lsleq	r1, r1, #9
 8000c16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c1e:	3a7f      	subs	r2, #127	; 0x7f
 8000c20:	bfc2      	ittt	gt
 8000c22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2a:	4770      	bxgt	lr
 8000c2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	dc5d      	bgt.n	8000cf4 <__aeabi_fmul+0x150>
 8000c38:	f112 0f19 	cmn.w	r2, #25
 8000c3c:	bfdc      	itt	le
 8000c3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c42:	4770      	bxle	lr
 8000c44:	f1c2 0200 	rsb	r2, r2, #0
 8000c48:	0041      	lsls	r1, r0, #1
 8000c4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000c4e:	f1c2 0220 	rsb	r2, r2, #32
 8000c52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5a:	f140 0000 	adc.w	r0, r0, #0
 8000c5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c62:	bf08      	it	eq
 8000c64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c68:	4770      	bx	lr
 8000c6a:	f092 0f00 	teq	r2, #0
 8000c6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c72:	bf02      	ittt	eq
 8000c74:	0040      	lsleq	r0, r0, #1
 8000c76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7a:	3a01      	subeq	r2, #1
 8000c7c:	d0f9      	beq.n	8000c72 <__aeabi_fmul+0xce>
 8000c7e:	ea40 000c 	orr.w	r0, r0, ip
 8000c82:	f093 0f00 	teq	r3, #0
 8000c86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8a:	bf02      	ittt	eq
 8000c8c:	0049      	lsleq	r1, r1, #1
 8000c8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c92:	3b01      	subeq	r3, #1
 8000c94:	d0f9      	beq.n	8000c8a <__aeabi_fmul+0xe6>
 8000c96:	ea41 010c 	orr.w	r1, r1, ip
 8000c9a:	e78f      	b.n	8000bbc <__aeabi_fmul+0x18>
 8000c9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca0:	ea92 0f0c 	teq	r2, ip
 8000ca4:	bf18      	it	ne
 8000ca6:	ea93 0f0c 	teqne	r3, ip
 8000caa:	d00a      	beq.n	8000cc2 <__aeabi_fmul+0x11e>
 8000cac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb0:	bf18      	it	ne
 8000cb2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cb6:	d1d8      	bne.n	8000c6a <__aeabi_fmul+0xc6>
 8000cb8:	ea80 0001 	eor.w	r0, r0, r1
 8000cbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc0:	4770      	bx	lr
 8000cc2:	f090 0f00 	teq	r0, #0
 8000cc6:	bf17      	itett	ne
 8000cc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ccc:	4608      	moveq	r0, r1
 8000cce:	f091 0f00 	teqne	r1, #0
 8000cd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cd6:	d014      	beq.n	8000d02 <__aeabi_fmul+0x15e>
 8000cd8:	ea92 0f0c 	teq	r2, ip
 8000cdc:	d101      	bne.n	8000ce2 <__aeabi_fmul+0x13e>
 8000cde:	0242      	lsls	r2, r0, #9
 8000ce0:	d10f      	bne.n	8000d02 <__aeabi_fmul+0x15e>
 8000ce2:	ea93 0f0c 	teq	r3, ip
 8000ce6:	d103      	bne.n	8000cf0 <__aeabi_fmul+0x14c>
 8000ce8:	024b      	lsls	r3, r1, #9
 8000cea:	bf18      	it	ne
 8000cec:	4608      	movne	r0, r1
 8000cee:	d108      	bne.n	8000d02 <__aeabi_fmul+0x15e>
 8000cf0:	ea80 0001 	eor.w	r0, r0, r1
 8000cf4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cf8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d00:	4770      	bx	lr
 8000d02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_fdiv>:
 8000d0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d14:	bf1e      	ittt	ne
 8000d16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1a:	ea92 0f0c 	teqne	r2, ip
 8000d1e:	ea93 0f0c 	teqne	r3, ip
 8000d22:	d069      	beq.n	8000df8 <__aeabi_fdiv+0xec>
 8000d24:	eba2 0203 	sub.w	r2, r2, r3
 8000d28:	ea80 0c01 	eor.w	ip, r0, r1
 8000d2c:	0249      	lsls	r1, r1, #9
 8000d2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d32:	d037      	beq.n	8000da4 <__aeabi_fdiv+0x98>
 8000d34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	428b      	cmp	r3, r1
 8000d46:	bf38      	it	cc
 8000d48:	005b      	lslcc	r3, r3, #1
 8000d4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d52:	428b      	cmp	r3, r1
 8000d54:	bf24      	itt	cs
 8000d56:	1a5b      	subcs	r3, r3, r1
 8000d58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d60:	bf24      	itt	cs
 8000d62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d6e:	bf24      	itt	cs
 8000d70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d7c:	bf24      	itt	cs
 8000d7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d86:	011b      	lsls	r3, r3, #4
 8000d88:	bf18      	it	ne
 8000d8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d8e:	d1e0      	bne.n	8000d52 <__aeabi_fdiv+0x46>
 8000d90:	2afd      	cmp	r2, #253	; 0xfd
 8000d92:	f63f af50 	bhi.w	8000c36 <__aeabi_fmul+0x92>
 8000d96:	428b      	cmp	r3, r1
 8000d98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d9c:	bf08      	it	eq
 8000d9e:	f020 0001 	biceq.w	r0, r0, #1
 8000da2:	4770      	bx	lr
 8000da4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dac:	327f      	adds	r2, #127	; 0x7f
 8000dae:	bfc2      	ittt	gt
 8000db0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000db8:	4770      	bxgt	lr
 8000dba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dbe:	f04f 0300 	mov.w	r3, #0
 8000dc2:	3a01      	subs	r2, #1
 8000dc4:	e737      	b.n	8000c36 <__aeabi_fmul+0x92>
 8000dc6:	f092 0f00 	teq	r2, #0
 8000dca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dce:	bf02      	ittt	eq
 8000dd0:	0040      	lsleq	r0, r0, #1
 8000dd2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dd6:	3a01      	subeq	r2, #1
 8000dd8:	d0f9      	beq.n	8000dce <__aeabi_fdiv+0xc2>
 8000dda:	ea40 000c 	orr.w	r0, r0, ip
 8000dde:	f093 0f00 	teq	r3, #0
 8000de2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000de6:	bf02      	ittt	eq
 8000de8:	0049      	lsleq	r1, r1, #1
 8000dea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dee:	3b01      	subeq	r3, #1
 8000df0:	d0f9      	beq.n	8000de6 <__aeabi_fdiv+0xda>
 8000df2:	ea41 010c 	orr.w	r1, r1, ip
 8000df6:	e795      	b.n	8000d24 <__aeabi_fdiv+0x18>
 8000df8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dfc:	ea92 0f0c 	teq	r2, ip
 8000e00:	d108      	bne.n	8000e14 <__aeabi_fdiv+0x108>
 8000e02:	0242      	lsls	r2, r0, #9
 8000e04:	f47f af7d 	bne.w	8000d02 <__aeabi_fmul+0x15e>
 8000e08:	ea93 0f0c 	teq	r3, ip
 8000e0c:	f47f af70 	bne.w	8000cf0 <__aeabi_fmul+0x14c>
 8000e10:	4608      	mov	r0, r1
 8000e12:	e776      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e14:	ea93 0f0c 	teq	r3, ip
 8000e18:	d104      	bne.n	8000e24 <__aeabi_fdiv+0x118>
 8000e1a:	024b      	lsls	r3, r1, #9
 8000e1c:	f43f af4c 	beq.w	8000cb8 <__aeabi_fmul+0x114>
 8000e20:	4608      	mov	r0, r1
 8000e22:	e76e      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e28:	bf18      	it	ne
 8000e2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e2e:	d1ca      	bne.n	8000dc6 <__aeabi_fdiv+0xba>
 8000e30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e34:	f47f af5c 	bne.w	8000cf0 <__aeabi_fmul+0x14c>
 8000e38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e3c:	f47f af3c 	bne.w	8000cb8 <__aeabi_fmul+0x114>
 8000e40:	e75f      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e42:	bf00      	nop

08000e44 <__gesf2>:
 8000e44:	f04f 3cff 	mov.w	ip, #4294967295
 8000e48:	e006      	b.n	8000e58 <__cmpsf2+0x4>
 8000e4a:	bf00      	nop

08000e4c <__lesf2>:
 8000e4c:	f04f 0c01 	mov.w	ip, #1
 8000e50:	e002      	b.n	8000e58 <__cmpsf2+0x4>
 8000e52:	bf00      	nop

08000e54 <__cmpsf2>:
 8000e54:	f04f 0c01 	mov.w	ip, #1
 8000e58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e68:	bf18      	it	ne
 8000e6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e6e:	d011      	beq.n	8000e94 <__cmpsf2+0x40>
 8000e70:	b001      	add	sp, #4
 8000e72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e76:	bf18      	it	ne
 8000e78:	ea90 0f01 	teqne	r0, r1
 8000e7c:	bf58      	it	pl
 8000e7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e82:	bf88      	it	hi
 8000e84:	17c8      	asrhi	r0, r1, #31
 8000e86:	bf38      	it	cc
 8000e88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e8c:	bf18      	it	ne
 8000e8e:	f040 0001 	orrne.w	r0, r0, #1
 8000e92:	4770      	bx	lr
 8000e94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e98:	d102      	bne.n	8000ea0 <__cmpsf2+0x4c>
 8000e9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e9e:	d105      	bne.n	8000eac <__cmpsf2+0x58>
 8000ea0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea4:	d1e4      	bne.n	8000e70 <__cmpsf2+0x1c>
 8000ea6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eaa:	d0e1      	beq.n	8000e70 <__cmpsf2+0x1c>
 8000eac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_cfrcmple>:
 8000eb4:	4684      	mov	ip, r0
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	4661      	mov	r1, ip
 8000eba:	e7ff      	b.n	8000ebc <__aeabi_cfcmpeq>

08000ebc <__aeabi_cfcmpeq>:
 8000ebc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ebe:	f7ff ffc9 	bl	8000e54 <__cmpsf2>
 8000ec2:	2800      	cmp	r0, #0
 8000ec4:	bf48      	it	mi
 8000ec6:	f110 0f00 	cmnmi.w	r0, #0
 8000eca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ecc <__aeabi_fcmpeq>:
 8000ecc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed0:	f7ff fff4 	bl	8000ebc <__aeabi_cfcmpeq>
 8000ed4:	bf0c      	ite	eq
 8000ed6:	2001      	moveq	r0, #1
 8000ed8:	2000      	movne	r0, #0
 8000eda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ede:	bf00      	nop

08000ee0 <__aeabi_fcmplt>:
 8000ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee4:	f7ff ffea 	bl	8000ebc <__aeabi_cfcmpeq>
 8000ee8:	bf34      	ite	cc
 8000eea:	2001      	movcc	r0, #1
 8000eec:	2000      	movcs	r0, #0
 8000eee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_fcmple>:
 8000ef4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef8:	f7ff ffe0 	bl	8000ebc <__aeabi_cfcmpeq>
 8000efc:	bf94      	ite	ls
 8000efe:	2001      	movls	r0, #1
 8000f00:	2000      	movhi	r0, #0
 8000f02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f06:	bf00      	nop

08000f08 <__aeabi_fcmpge>:
 8000f08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f0c:	f7ff ffd2 	bl	8000eb4 <__aeabi_cfrcmple>
 8000f10:	bf94      	ite	ls
 8000f12:	2001      	movls	r0, #1
 8000f14:	2000      	movhi	r0, #0
 8000f16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1a:	bf00      	nop

08000f1c <__aeabi_fcmpgt>:
 8000f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f20:	f7ff ffc8 	bl	8000eb4 <__aeabi_cfrcmple>
 8000f24:	bf34      	ite	cc
 8000f26:	2001      	movcc	r0, #1
 8000f28:	2000      	movcs	r0, #0
 8000f2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2e:	bf00      	nop

08000f30 <__aeabi_f2uiz>:
 8000f30:	0042      	lsls	r2, r0, #1
 8000f32:	d20e      	bcs.n	8000f52 <__aeabi_f2uiz+0x22>
 8000f34:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f38:	d30b      	bcc.n	8000f52 <__aeabi_f2uiz+0x22>
 8000f3a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f3e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f42:	d409      	bmi.n	8000f58 <__aeabi_f2uiz+0x28>
 8000f44:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f4c:	fa23 f002 	lsr.w	r0, r3, r2
 8000f50:	4770      	bx	lr
 8000f52:	f04f 0000 	mov.w	r0, #0
 8000f56:	4770      	bx	lr
 8000f58:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f5c:	d101      	bne.n	8000f62 <__aeabi_f2uiz+0x32>
 8000f5e:	0242      	lsls	r2, r0, #9
 8000f60:	d102      	bne.n	8000f68 <__aeabi_f2uiz+0x38>
 8000f62:	f04f 30ff 	mov.w	r0, #4294967295
 8000f66:	4770      	bx	lr
 8000f68:	f04f 0000 	mov.w	r0, #0
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f70:	b510      	push	{r4, lr}
 8000f72:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f74:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <HAL_InitTick+0x40>)
 8000f76:	7818      	ldrb	r0, [r3, #0]
 8000f78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f7c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000f80:	4a0c      	ldr	r2, [pc, #48]	; (8000fb4 <HAL_InitTick+0x44>)
 8000f82:	6810      	ldr	r0, [r2, #0]
 8000f84:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f88:	f000 f88e 	bl	80010a8 <HAL_SYSTICK_Config>
 8000f8c:	b968      	cbnz	r0, 8000faa <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f8e:	2c0f      	cmp	r4, #15
 8000f90:	d901      	bls.n	8000f96 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000f92:	2001      	movs	r0, #1
 8000f94:	e00a      	b.n	8000fac <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f96:	2200      	movs	r2, #0
 8000f98:	4621      	mov	r1, r4
 8000f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f9e:	f000 f841 	bl	8001024 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa2:	4b03      	ldr	r3, [pc, #12]	; (8000fb0 <HAL_InitTick+0x40>)
 8000fa4:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	e000      	b.n	8000fac <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000faa:	2001      	movs	r0, #1
}
 8000fac:	bd10      	pop	{r4, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000000 	.word	0x20000000
 8000fb4:	20000040 	.word	0x20000040

08000fb8 <HAL_Init>:
{
 8000fb8:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fba:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <HAL_Init+0x20>)
 8000fbc:	6813      	ldr	r3, [r2, #0]
 8000fbe:	f043 0310 	orr.w	r3, r3, #16
 8000fc2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc4:	2003      	movs	r0, #3
 8000fc6:	f000 f81b 	bl	8001000 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f7ff ffd0 	bl	8000f70 <HAL_InitTick>
  HAL_MspInit();
 8000fd0:	f001 ffa8 	bl	8002f24 <HAL_MspInit>
}
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	bd08      	pop	{r3, pc}
 8000fd8:	40022000 	.word	0x40022000

08000fdc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000fdc:	4a03      	ldr	r2, [pc, #12]	; (8000fec <HAL_IncTick+0x10>)
 8000fde:	6811      	ldr	r1, [r2, #0]
 8000fe0:	4b03      	ldr	r3, [pc, #12]	; (8000ff0 <HAL_IncTick+0x14>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	440b      	add	r3, r1
 8000fe6:	6013      	str	r3, [r2, #0]
}
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	2000008c 	.word	0x2000008c
 8000ff0:	20000000 	.word	0x20000000

08000ff4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ff4:	4b01      	ldr	r3, [pc, #4]	; (8000ffc <HAL_GetTick+0x8>)
 8000ff6:	6818      	ldr	r0, [r3, #0]
}
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	2000008c 	.word	0x2000008c

08001000 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001000:	4a07      	ldr	r2, [pc, #28]	; (8001020 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001002:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001004:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001008:	041b      	lsls	r3, r3, #16
 800100a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800100c:	0200      	lsls	r0, r0, #8
 800100e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001012:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8001014:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001018:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800101c:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001024:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001026:	4b17      	ldr	r3, [pc, #92]	; (8001084 <HAL_NVIC_SetPriority+0x60>)
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800102e:	f1c3 0407 	rsb	r4, r3, #7
 8001032:	2c04      	cmp	r4, #4
 8001034:	bf28      	it	cs
 8001036:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001038:	1d1d      	adds	r5, r3, #4
 800103a:	2d06      	cmp	r5, #6
 800103c:	d918      	bls.n	8001070 <HAL_NVIC_SetPriority+0x4c>
 800103e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	f04f 35ff 	mov.w	r5, #4294967295
 8001044:	fa05 f404 	lsl.w	r4, r5, r4
 8001048:	ea21 0104 	bic.w	r1, r1, r4
 800104c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800104e:	fa05 f303 	lsl.w	r3, r5, r3
 8001052:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001056:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001058:	2800      	cmp	r0, #0
 800105a:	db0b      	blt.n	8001074 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105c:	0109      	lsls	r1, r1, #4
 800105e:	b2c9      	uxtb	r1, r1
 8001060:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001064:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001068:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800106c:	bc30      	pop	{r4, r5}
 800106e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001070:	2300      	movs	r3, #0
 8001072:	e7e5      	b.n	8001040 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001074:	f000 000f 	and.w	r0, r0, #15
 8001078:	0109      	lsls	r1, r1, #4
 800107a:	b2c9      	uxtb	r1, r1
 800107c:	4b02      	ldr	r3, [pc, #8]	; (8001088 <HAL_NVIC_SetPriority+0x64>)
 800107e:	5419      	strb	r1, [r3, r0]
 8001080:	e7f4      	b.n	800106c <HAL_NVIC_SetPriority+0x48>
 8001082:	bf00      	nop
 8001084:	e000ed00 	.word	0xe000ed00
 8001088:	e000ed14 	.word	0xe000ed14

0800108c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800108c:	2800      	cmp	r0, #0
 800108e:	db07      	blt.n	80010a0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001090:	f000 021f 	and.w	r2, r0, #31
 8001094:	0940      	lsrs	r0, r0, #5
 8001096:	2301      	movs	r3, #1
 8001098:	4093      	lsls	r3, r2
 800109a:	4a02      	ldr	r2, [pc, #8]	; (80010a4 <HAL_NVIC_EnableIRQ+0x18>)
 800109c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000e100 	.word	0xe000e100

080010a8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a8:	3801      	subs	r0, #1
 80010aa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80010ae:	d20a      	bcs.n	80010c6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HAL_SYSTICK_Config+0x24>)
 80010b2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b4:	4a06      	ldr	r2, [pc, #24]	; (80010d0 <HAL_SYSTICK_Config+0x28>)
 80010b6:	21f0      	movs	r1, #240	; 0xf0
 80010b8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010bc:	2000      	movs	r0, #0
 80010be:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c0:	2207      	movs	r2, #7
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80010c6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000e010 	.word	0xe000e010
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010d4:	b470      	push	{r4, r5, r6}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80010d6:	6c06      	ldr	r6, [r0, #64]	; 0x40
 80010d8:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80010da:	2401      	movs	r4, #1
 80010dc:	40b4      	lsls	r4, r6
 80010de:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80010e0:	6804      	ldr	r4, [r0, #0]
 80010e2:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80010e4:	6843      	ldr	r3, [r0, #4]
 80010e6:	2b10      	cmp	r3, #16
 80010e8:	d005      	beq.n	80010f6 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80010ea:	6803      	ldr	r3, [r0, #0]
 80010ec:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80010ee:	6803      	ldr	r3, [r0, #0]
 80010f0:	60da      	str	r2, [r3, #12]
  }
}
 80010f2:	bc70      	pop	{r4, r5, r6}
 80010f4:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 80010f6:	6803      	ldr	r3, [r0, #0]
 80010f8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80010fa:	6803      	ldr	r3, [r0, #0]
 80010fc:	60d9      	str	r1, [r3, #12]
 80010fe:	e7f8      	b.n	80010f2 <DMA_SetConfig+0x1e>

08001100 <HAL_DMA_Init>:
  if(hdma == NULL)
 8001100:	b360      	cbz	r0, 800115c <HAL_DMA_Init+0x5c>
{
 8001102:	b410      	push	{r4}
 8001104:	4602      	mov	r2, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001106:	6801      	ldr	r1, [r0, #0]
 8001108:	4b15      	ldr	r3, [pc, #84]	; (8001160 <HAL_DMA_Init+0x60>)
 800110a:	440b      	add	r3, r1
 800110c:	4815      	ldr	r0, [pc, #84]	; (8001164 <HAL_DMA_Init+0x64>)
 800110e:	fba0 0303 	umull	r0, r3, r0, r3
 8001112:	091b      	lsrs	r3, r3, #4
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	6413      	str	r3, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001118:	4b13      	ldr	r3, [pc, #76]	; (8001168 <HAL_DMA_Init+0x68>)
 800111a:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 800111c:	2302      	movs	r3, #2
 800111e:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8001122:	6808      	ldr	r0, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001124:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
 8001128:	f020 0030 	bic.w	r0, r0, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 800112c:	6853      	ldr	r3, [r2, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800112e:	6894      	ldr	r4, [r2, #8]
  tmp |=  hdma->Init.Direction        |
 8001130:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001132:	68d4      	ldr	r4, [r2, #12]
 8001134:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001136:	6914      	ldr	r4, [r2, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001138:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800113a:	6954      	ldr	r4, [r2, #20]
 800113c:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 800113e:	6994      	ldr	r4, [r2, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001140:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001142:	69d4      	ldr	r4, [r2, #28]
 8001144:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8001146:	4303      	orrs	r3, r0
  hdma->Instance->CCR = tmp;
 8001148:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800114a:	2000      	movs	r0, #0
 800114c:	6390      	str	r0, [r2, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 800114e:	2301      	movs	r3, #1
 8001150:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8001154:	f882 0020 	strb.w	r0, [r2, #32]
}
 8001158:	bc10      	pop	{r4}
 800115a:	4770      	bx	lr
    return HAL_ERROR;
 800115c:	2001      	movs	r0, #1
}
 800115e:	4770      	bx	lr
 8001160:	bffdfff8 	.word	0xbffdfff8
 8001164:	cccccccd 	.word	0xcccccccd
 8001168:	40020000 	.word	0x40020000

0800116c <HAL_DMA_Start_IT>:
{
 800116c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 800116e:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001172:	2c01      	cmp	r4, #1
 8001174:	d032      	beq.n	80011dc <HAL_DMA_Start_IT+0x70>
 8001176:	2401      	movs	r4, #1
 8001178:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800117c:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 8001180:	2c01      	cmp	r4, #1
 8001182:	d004      	beq.n	800118e <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 8001184:	2300      	movs	r3, #0
 8001186:	f880 3020 	strb.w	r3, [r0, #32]
    status = HAL_BUSY;
 800118a:	2002      	movs	r0, #2
}
 800118c:	bd38      	pop	{r3, r4, r5, pc}
 800118e:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8001190:	2002      	movs	r0, #2
 8001192:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001196:	2000      	movs	r0, #0
 8001198:	63a0      	str	r0, [r4, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 800119a:	6825      	ldr	r5, [r4, #0]
 800119c:	6828      	ldr	r0, [r5, #0]
 800119e:	f020 0001 	bic.w	r0, r0, #1
 80011a2:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011a4:	4620      	mov	r0, r4
 80011a6:	f7ff ff95 	bl	80010d4 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 80011aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80011ac:	b15b      	cbz	r3, 80011c6 <HAL_DMA_Start_IT+0x5a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011ae:	6822      	ldr	r2, [r4, #0]
 80011b0:	6813      	ldr	r3, [r2, #0]
 80011b2:	f043 030e 	orr.w	r3, r3, #14
 80011b6:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80011b8:	6822      	ldr	r2, [r4, #0]
 80011ba:	6813      	ldr	r3, [r2, #0]
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011c2:	2000      	movs	r0, #0
 80011c4:	e7e2      	b.n	800118c <HAL_DMA_Start_IT+0x20>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011c6:	6822      	ldr	r2, [r4, #0]
 80011c8:	6813      	ldr	r3, [r2, #0]
 80011ca:	f023 0304 	bic.w	r3, r3, #4
 80011ce:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80011d0:	6822      	ldr	r2, [r4, #0]
 80011d2:	6813      	ldr	r3, [r2, #0]
 80011d4:	f043 030a 	orr.w	r3, r3, #10
 80011d8:	6013      	str	r3, [r2, #0]
 80011da:	e7ed      	b.n	80011b8 <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 80011dc:	2002      	movs	r0, #2
 80011de:	e7d5      	b.n	800118c <HAL_DMA_Start_IT+0x20>

080011e0 <HAL_DMA_Abort_IT>:
{  
 80011e0:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011e2:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d003      	beq.n	80011f2 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ea:	2304      	movs	r3, #4
 80011ec:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80011ee:	2001      	movs	r0, #1
}
 80011f0:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011f2:	6802      	ldr	r2, [r0, #0]
 80011f4:	6813      	ldr	r3, [r2, #0]
 80011f6:	f023 030e 	bic.w	r3, r3, #14
 80011fa:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80011fc:	6802      	ldr	r2, [r0, #0]
 80011fe:	6813      	ldr	r3, [r2, #0]
 8001200:	f023 0301 	bic.w	r3, r3, #1
 8001204:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001206:	6803      	ldr	r3, [r0, #0]
 8001208:	4a19      	ldr	r2, [pc, #100]	; (8001270 <HAL_DMA_Abort_IT+0x90>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d014      	beq.n	8001238 <HAL_DMA_Abort_IT+0x58>
 800120e:	3214      	adds	r2, #20
 8001210:	4293      	cmp	r3, r2
 8001212:	d01f      	beq.n	8001254 <HAL_DMA_Abort_IT+0x74>
 8001214:	3214      	adds	r2, #20
 8001216:	4293      	cmp	r3, r2
 8001218:	d01e      	beq.n	8001258 <HAL_DMA_Abort_IT+0x78>
 800121a:	3214      	adds	r2, #20
 800121c:	4293      	cmp	r3, r2
 800121e:	d01e      	beq.n	800125e <HAL_DMA_Abort_IT+0x7e>
 8001220:	3214      	adds	r2, #20
 8001222:	4293      	cmp	r3, r2
 8001224:	d01e      	beq.n	8001264 <HAL_DMA_Abort_IT+0x84>
 8001226:	3214      	adds	r2, #20
 8001228:	4293      	cmp	r3, r2
 800122a:	d002      	beq.n	8001232 <HAL_DMA_Abort_IT+0x52>
 800122c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001230:	e003      	b.n	800123a <HAL_DMA_Abort_IT+0x5a>
 8001232:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001236:	e000      	b.n	800123a <HAL_DMA_Abort_IT+0x5a>
 8001238:	2201      	movs	r2, #1
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <HAL_DMA_Abort_IT+0x94>)
 800123c:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800123e:	2301      	movs	r3, #1
 8001240:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001244:	2300      	movs	r3, #0
 8001246:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800124a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800124c:	b16b      	cbz	r3, 800126a <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 800124e:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001250:	2000      	movs	r0, #0
 8001252:	e7cd      	b.n	80011f0 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001254:	2210      	movs	r2, #16
 8001256:	e7f0      	b.n	800123a <HAL_DMA_Abort_IT+0x5a>
 8001258:	f44f 7280 	mov.w	r2, #256	; 0x100
 800125c:	e7ed      	b.n	800123a <HAL_DMA_Abort_IT+0x5a>
 800125e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001262:	e7ea      	b.n	800123a <HAL_DMA_Abort_IT+0x5a>
 8001264:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001268:	e7e7      	b.n	800123a <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 800126a:	2000      	movs	r0, #0
 800126c:	e7c0      	b.n	80011f0 <HAL_DMA_Abort_IT+0x10>
 800126e:	bf00      	nop
 8001270:	40020008 	.word	0x40020008
 8001274:	40020000 	.word	0x40020000

08001278 <HAL_DMA_IRQHandler>:
{
 8001278:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800127a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800127c:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800127e:	6804      	ldr	r4, [r0, #0]
 8001280:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001282:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001284:	2304      	movs	r3, #4
 8001286:	408b      	lsls	r3, r1
 8001288:	4213      	tst	r3, r2
 800128a:	d035      	beq.n	80012f8 <HAL_DMA_IRQHandler+0x80>
 800128c:	f015 0f04 	tst.w	r5, #4
 8001290:	d032      	beq.n	80012f8 <HAL_DMA_IRQHandler+0x80>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001292:	6823      	ldr	r3, [r4, #0]
 8001294:	f013 0f20 	tst.w	r3, #32
 8001298:	d103      	bne.n	80012a2 <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800129a:	6823      	ldr	r3, [r4, #0]
 800129c:	f023 0304 	bic.w	r3, r3, #4
 80012a0:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80012a2:	6803      	ldr	r3, [r0, #0]
 80012a4:	4a43      	ldr	r2, [pc, #268]	; (80013b4 <HAL_DMA_IRQHandler+0x13c>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d014      	beq.n	80012d4 <HAL_DMA_IRQHandler+0x5c>
 80012aa:	3214      	adds	r2, #20
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d018      	beq.n	80012e2 <HAL_DMA_IRQHandler+0x6a>
 80012b0:	3214      	adds	r2, #20
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d017      	beq.n	80012e6 <HAL_DMA_IRQHandler+0x6e>
 80012b6:	3214      	adds	r2, #20
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d017      	beq.n	80012ec <HAL_DMA_IRQHandler+0x74>
 80012bc:	3214      	adds	r2, #20
 80012be:	4293      	cmp	r3, r2
 80012c0:	d017      	beq.n	80012f2 <HAL_DMA_IRQHandler+0x7a>
 80012c2:	3214      	adds	r2, #20
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d002      	beq.n	80012ce <HAL_DMA_IRQHandler+0x56>
 80012c8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80012cc:	e003      	b.n	80012d6 <HAL_DMA_IRQHandler+0x5e>
 80012ce:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80012d2:	e000      	b.n	80012d6 <HAL_DMA_IRQHandler+0x5e>
 80012d4:	2204      	movs	r2, #4
 80012d6:	4b38      	ldr	r3, [pc, #224]	; (80013b8 <HAL_DMA_IRQHandler+0x140>)
 80012d8:	605a      	str	r2, [r3, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80012da:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80012dc:	b103      	cbz	r3, 80012e0 <HAL_DMA_IRQHandler+0x68>
      hdma->XferHalfCpltCallback(hdma);
 80012de:	4798      	blx	r3
}
 80012e0:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80012e2:	2240      	movs	r2, #64	; 0x40
 80012e4:	e7f7      	b.n	80012d6 <HAL_DMA_IRQHandler+0x5e>
 80012e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012ea:	e7f4      	b.n	80012d6 <HAL_DMA_IRQHandler+0x5e>
 80012ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012f0:	e7f1      	b.n	80012d6 <HAL_DMA_IRQHandler+0x5e>
 80012f2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80012f6:	e7ee      	b.n	80012d6 <HAL_DMA_IRQHandler+0x5e>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80012f8:	2302      	movs	r3, #2
 80012fa:	408b      	lsls	r3, r1
 80012fc:	4213      	tst	r3, r2
 80012fe:	d03c      	beq.n	800137a <HAL_DMA_IRQHandler+0x102>
 8001300:	f015 0f02 	tst.w	r5, #2
 8001304:	d039      	beq.n	800137a <HAL_DMA_IRQHandler+0x102>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001306:	6823      	ldr	r3, [r4, #0]
 8001308:	f013 0f20 	tst.w	r3, #32
 800130c:	d106      	bne.n	800131c <HAL_DMA_IRQHandler+0xa4>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800130e:	6823      	ldr	r3, [r4, #0]
 8001310:	f023 030a 	bic.w	r3, r3, #10
 8001314:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001316:	2301      	movs	r3, #1
 8001318:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800131c:	6803      	ldr	r3, [r0, #0]
 800131e:	4a25      	ldr	r2, [pc, #148]	; (80013b4 <HAL_DMA_IRQHandler+0x13c>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d014      	beq.n	800134e <HAL_DMA_IRQHandler+0xd6>
 8001324:	3214      	adds	r2, #20
 8001326:	4293      	cmp	r3, r2
 8001328:	d01c      	beq.n	8001364 <HAL_DMA_IRQHandler+0xec>
 800132a:	3214      	adds	r2, #20
 800132c:	4293      	cmp	r3, r2
 800132e:	d01b      	beq.n	8001368 <HAL_DMA_IRQHandler+0xf0>
 8001330:	3214      	adds	r2, #20
 8001332:	4293      	cmp	r3, r2
 8001334:	d01b      	beq.n	800136e <HAL_DMA_IRQHandler+0xf6>
 8001336:	3214      	adds	r2, #20
 8001338:	4293      	cmp	r3, r2
 800133a:	d01b      	beq.n	8001374 <HAL_DMA_IRQHandler+0xfc>
 800133c:	3214      	adds	r2, #20
 800133e:	4293      	cmp	r3, r2
 8001340:	d002      	beq.n	8001348 <HAL_DMA_IRQHandler+0xd0>
 8001342:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001346:	e003      	b.n	8001350 <HAL_DMA_IRQHandler+0xd8>
 8001348:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800134c:	e000      	b.n	8001350 <HAL_DMA_IRQHandler+0xd8>
 800134e:	2202      	movs	r2, #2
 8001350:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <HAL_DMA_IRQHandler+0x140>)
 8001352:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 8001354:	2300      	movs	r3, #0
 8001356:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 800135a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800135c:	2b00      	cmp	r3, #0
 800135e:	d0bf      	beq.n	80012e0 <HAL_DMA_IRQHandler+0x68>
      hdma->XferCpltCallback(hdma);
 8001360:	4798      	blx	r3
 8001362:	e7bd      	b.n	80012e0 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001364:	2220      	movs	r2, #32
 8001366:	e7f3      	b.n	8001350 <HAL_DMA_IRQHandler+0xd8>
 8001368:	f44f 7200 	mov.w	r2, #512	; 0x200
 800136c:	e7f0      	b.n	8001350 <HAL_DMA_IRQHandler+0xd8>
 800136e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001372:	e7ed      	b.n	8001350 <HAL_DMA_IRQHandler+0xd8>
 8001374:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001378:	e7ea      	b.n	8001350 <HAL_DMA_IRQHandler+0xd8>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800137a:	2308      	movs	r3, #8
 800137c:	fa03 f101 	lsl.w	r1, r3, r1
 8001380:	4211      	tst	r1, r2
 8001382:	d0ad      	beq.n	80012e0 <HAL_DMA_IRQHandler+0x68>
 8001384:	f015 0f08 	tst.w	r5, #8
 8001388:	d0aa      	beq.n	80012e0 <HAL_DMA_IRQHandler+0x68>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800138a:	6823      	ldr	r3, [r4, #0]
 800138c:	f023 030e 	bic.w	r3, r3, #14
 8001390:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001392:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001394:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001396:	2301      	movs	r3, #1
 8001398:	fa03 f202 	lsl.w	r2, r3, r2
 800139c:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800139e:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80013a0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80013a4:	2300      	movs	r3, #0
 80013a6:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80013aa:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d097      	beq.n	80012e0 <HAL_DMA_IRQHandler+0x68>
      hdma->XferErrorCallback(hdma);
 80013b0:	4798      	blx	r3
  return;
 80013b2:	e795      	b.n	80012e0 <HAL_DMA_IRQHandler+0x68>
 80013b4:	40020008 	.word	0x40020008
 80013b8:	40020000 	.word	0x40020000

080013bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013bc:	b4f0      	push	{r4, r5, r6, r7}
 80013be:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013c0:	2600      	movs	r6, #0
  uint32_t position = 0x00u;
 80013c2:	4632      	mov	r2, r6
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013c4:	e0a2      	b.n	800150c <HAL_GPIO_Init+0x150>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013c6:	2d00      	cmp	r5, #0
 80013c8:	d05a      	beq.n	8001480 <HAL_GPIO_Init+0xc4>
 80013ca:	2d01      	cmp	r5, #1
 80013cc:	d100      	bne.n	80013d0 <HAL_GPIO_Init+0x14>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013ce:	68ce      	ldr	r6, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013d0:	2bff      	cmp	r3, #255	; 0xff
 80013d2:	d869      	bhi.n	80014a8 <HAL_GPIO_Init+0xec>
 80013d4:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013d6:	2bff      	cmp	r3, #255	; 0xff
 80013d8:	d869      	bhi.n	80014ae <HAL_GPIO_Init+0xf2>
 80013da:	0095      	lsls	r5, r2, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013dc:	f8dc 4000 	ldr.w	r4, [ip]
 80013e0:	270f      	movs	r7, #15
 80013e2:	40af      	lsls	r7, r5
 80013e4:	ea24 0407 	bic.w	r4, r4, r7
 80013e8:	fa06 f505 	lsl.w	r5, r6, r5
 80013ec:	432c      	orrs	r4, r5
 80013ee:	f8cc 4000 	str.w	r4, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013f2:	684c      	ldr	r4, [r1, #4]
 80013f4:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 80013f8:	f000 8087 	beq.w	800150a <HAL_GPIO_Init+0x14e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013fc:	4c5f      	ldr	r4, [pc, #380]	; (800157c <HAL_GPIO_Init+0x1c0>)
 80013fe:	69a5      	ldr	r5, [r4, #24]
 8001400:	f045 0501 	orr.w	r5, r5, #1
 8001404:	61a5      	str	r5, [r4, #24]
 8001406:	69a4      	ldr	r4, [r4, #24]
 8001408:	f004 0401 	and.w	r4, r4, #1
 800140c:	9401      	str	r4, [sp, #4]
 800140e:	9c01      	ldr	r4, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8001410:	0895      	lsrs	r5, r2, #2
 8001412:	1caf      	adds	r7, r5, #2
 8001414:	4c5a      	ldr	r4, [pc, #360]	; (8001580 <HAL_GPIO_Init+0x1c4>)
 8001416:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800141a:	f002 0703 	and.w	r7, r2, #3
 800141e:	00bf      	lsls	r7, r7, #2
 8001420:	f04f 0c0f 	mov.w	ip, #15
 8001424:	fa0c fc07 	lsl.w	ip, ip, r7
 8001428:	ea24 0c0c 	bic.w	ip, r4, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800142c:	4c55      	ldr	r4, [pc, #340]	; (8001584 <HAL_GPIO_Init+0x1c8>)
 800142e:	42a0      	cmp	r0, r4
 8001430:	d043      	beq.n	80014ba <HAL_GPIO_Init+0xfe>
 8001432:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001436:	42a0      	cmp	r0, r4
 8001438:	f000 8081 	beq.w	800153e <HAL_GPIO_Init+0x182>
 800143c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001440:	42a0      	cmp	r0, r4
 8001442:	d07e      	beq.n	8001542 <HAL_GPIO_Init+0x186>
 8001444:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001448:	42a0      	cmp	r0, r4
 800144a:	d034      	beq.n	80014b6 <HAL_GPIO_Init+0xfa>
 800144c:	2404      	movs	r4, #4
 800144e:	e035      	b.n	80014bc <HAL_GPIO_Init+0x100>
      switch (GPIO_Init->Mode)
 8001450:	4f4d      	ldr	r7, [pc, #308]	; (8001588 <HAL_GPIO_Init+0x1cc>)
 8001452:	42bd      	cmp	r5, r7
 8001454:	d014      	beq.n	8001480 <HAL_GPIO_Init+0xc4>
 8001456:	d90b      	bls.n	8001470 <HAL_GPIO_Init+0xb4>
 8001458:	4f4c      	ldr	r7, [pc, #304]	; (800158c <HAL_GPIO_Init+0x1d0>)
 800145a:	42bd      	cmp	r5, r7
 800145c:	d010      	beq.n	8001480 <HAL_GPIO_Init+0xc4>
 800145e:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001462:	42bd      	cmp	r5, r7
 8001464:	d00c      	beq.n	8001480 <HAL_GPIO_Init+0xc4>
 8001466:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 800146a:	42bd      	cmp	r5, r7
 800146c:	d1b0      	bne.n	80013d0 <HAL_GPIO_Init+0x14>
 800146e:	e007      	b.n	8001480 <HAL_GPIO_Init+0xc4>
 8001470:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8001474:	42bd      	cmp	r5, r7
 8001476:	d003      	beq.n	8001480 <HAL_GPIO_Init+0xc4>
 8001478:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800147c:	42bd      	cmp	r5, r7
 800147e:	d1a7      	bne.n	80013d0 <HAL_GPIO_Init+0x14>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001480:	688d      	ldr	r5, [r1, #8]
 8001482:	b17d      	cbz	r5, 80014a4 <HAL_GPIO_Init+0xe8>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001484:	2d01      	cmp	r5, #1
 8001486:	d008      	beq.n	800149a <HAL_GPIO_Init+0xde>
            GPIOx->BRR = ioposition;
 8001488:	6144      	str	r4, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800148a:	2608      	movs	r6, #8
 800148c:	e7a0      	b.n	80013d0 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800148e:	68ce      	ldr	r6, [r1, #12]
 8001490:	3608      	adds	r6, #8
          break;
 8001492:	e79d      	b.n	80013d0 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001494:	68ce      	ldr	r6, [r1, #12]
 8001496:	360c      	adds	r6, #12
          break;
 8001498:	e79a      	b.n	80013d0 <HAL_GPIO_Init+0x14>
            GPIOx->BSRR = ioposition;
 800149a:	6104      	str	r4, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800149c:	2608      	movs	r6, #8
 800149e:	e797      	b.n	80013d0 <HAL_GPIO_Init+0x14>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014a0:	2600      	movs	r6, #0
 80014a2:	e795      	b.n	80013d0 <HAL_GPIO_Init+0x14>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014a4:	2604      	movs	r6, #4
 80014a6:	e793      	b.n	80013d0 <HAL_GPIO_Init+0x14>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014a8:	f100 0c04 	add.w	ip, r0, #4
 80014ac:	e793      	b.n	80013d6 <HAL_GPIO_Init+0x1a>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014ae:	f1a2 0508 	sub.w	r5, r2, #8
 80014b2:	00ad      	lsls	r5, r5, #2
 80014b4:	e792      	b.n	80013dc <HAL_GPIO_Init+0x20>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014b6:	2403      	movs	r4, #3
 80014b8:	e000      	b.n	80014bc <HAL_GPIO_Init+0x100>
 80014ba:	2400      	movs	r4, #0
 80014bc:	40bc      	lsls	r4, r7
 80014be:	ea44 040c 	orr.w	r4, r4, ip
        AFIO->EXTICR[position >> 2u] = temp;
 80014c2:	3502      	adds	r5, #2
 80014c4:	4f2e      	ldr	r7, [pc, #184]	; (8001580 <HAL_GPIO_Init+0x1c4>)
 80014c6:	f847 4025 	str.w	r4, [r7, r5, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014ca:	684c      	ldr	r4, [r1, #4]
 80014cc:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 80014d0:	d039      	beq.n	8001546 <HAL_GPIO_Init+0x18a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014d2:	4d2f      	ldr	r5, [pc, #188]	; (8001590 <HAL_GPIO_Init+0x1d4>)
 80014d4:	682c      	ldr	r4, [r5, #0]
 80014d6:	431c      	orrs	r4, r3
 80014d8:	602c      	str	r4, [r5, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014da:	684c      	ldr	r4, [r1, #4]
 80014dc:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 80014e0:	d037      	beq.n	8001552 <HAL_GPIO_Init+0x196>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014e2:	4d2b      	ldr	r5, [pc, #172]	; (8001590 <HAL_GPIO_Init+0x1d4>)
 80014e4:	686c      	ldr	r4, [r5, #4]
 80014e6:	431c      	orrs	r4, r3
 80014e8:	606c      	str	r4, [r5, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014ea:	684c      	ldr	r4, [r1, #4]
 80014ec:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
 80014f0:	d035      	beq.n	800155e <HAL_GPIO_Init+0x1a2>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014f2:	4d27      	ldr	r5, [pc, #156]	; (8001590 <HAL_GPIO_Init+0x1d4>)
 80014f4:	68ac      	ldr	r4, [r5, #8]
 80014f6:	431c      	orrs	r4, r3
 80014f8:	60ac      	str	r4, [r5, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014fa:	684c      	ldr	r4, [r1, #4]
 80014fc:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
 8001500:	d033      	beq.n	800156a <HAL_GPIO_Init+0x1ae>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001502:	4d23      	ldr	r5, [pc, #140]	; (8001590 <HAL_GPIO_Init+0x1d4>)
 8001504:	68ec      	ldr	r4, [r5, #12]
 8001506:	4323      	orrs	r3, r4
 8001508:	60eb      	str	r3, [r5, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 800150a:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800150c:	680b      	ldr	r3, [r1, #0]
 800150e:	fa33 f402 	lsrs.w	r4, r3, r2
 8001512:	d030      	beq.n	8001576 <HAL_GPIO_Init+0x1ba>
    ioposition = (0x01uL << position);
 8001514:	2401      	movs	r4, #1
 8001516:	4094      	lsls	r4, r2
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001518:	4023      	ands	r3, r4
    if (iocurrent == ioposition)
 800151a:	429c      	cmp	r4, r3
 800151c:	d1f5      	bne.n	800150a <HAL_GPIO_Init+0x14e>
      switch (GPIO_Init->Mode)
 800151e:	684d      	ldr	r5, [r1, #4]
 8001520:	2d12      	cmp	r5, #18
 8001522:	d0b7      	beq.n	8001494 <HAL_GPIO_Init+0xd8>
 8001524:	d894      	bhi.n	8001450 <HAL_GPIO_Init+0x94>
 8001526:	2d02      	cmp	r5, #2
 8001528:	d0b1      	beq.n	800148e <HAL_GPIO_Init+0xd2>
 800152a:	f67f af4c 	bls.w	80013c6 <HAL_GPIO_Init+0xa>
 800152e:	2d03      	cmp	r5, #3
 8001530:	d0b6      	beq.n	80014a0 <HAL_GPIO_Init+0xe4>
 8001532:	2d11      	cmp	r5, #17
 8001534:	f47f af4c 	bne.w	80013d0 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001538:	68ce      	ldr	r6, [r1, #12]
 800153a:	3604      	adds	r6, #4
          break;
 800153c:	e748      	b.n	80013d0 <HAL_GPIO_Init+0x14>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800153e:	2401      	movs	r4, #1
 8001540:	e7bc      	b.n	80014bc <HAL_GPIO_Init+0x100>
 8001542:	2402      	movs	r4, #2
 8001544:	e7ba      	b.n	80014bc <HAL_GPIO_Init+0x100>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001546:	4d12      	ldr	r5, [pc, #72]	; (8001590 <HAL_GPIO_Init+0x1d4>)
 8001548:	682c      	ldr	r4, [r5, #0]
 800154a:	ea24 0403 	bic.w	r4, r4, r3
 800154e:	602c      	str	r4, [r5, #0]
 8001550:	e7c3      	b.n	80014da <HAL_GPIO_Init+0x11e>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001552:	4d0f      	ldr	r5, [pc, #60]	; (8001590 <HAL_GPIO_Init+0x1d4>)
 8001554:	686c      	ldr	r4, [r5, #4]
 8001556:	ea24 0403 	bic.w	r4, r4, r3
 800155a:	606c      	str	r4, [r5, #4]
 800155c:	e7c5      	b.n	80014ea <HAL_GPIO_Init+0x12e>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800155e:	4d0c      	ldr	r5, [pc, #48]	; (8001590 <HAL_GPIO_Init+0x1d4>)
 8001560:	68ac      	ldr	r4, [r5, #8]
 8001562:	ea24 0403 	bic.w	r4, r4, r3
 8001566:	60ac      	str	r4, [r5, #8]
 8001568:	e7c7      	b.n	80014fa <HAL_GPIO_Init+0x13e>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800156a:	4d09      	ldr	r5, [pc, #36]	; (8001590 <HAL_GPIO_Init+0x1d4>)
 800156c:	68ec      	ldr	r4, [r5, #12]
 800156e:	ea24 0303 	bic.w	r3, r4, r3
 8001572:	60eb      	str	r3, [r5, #12]
 8001574:	e7c9      	b.n	800150a <HAL_GPIO_Init+0x14e>
  }
}
 8001576:	b002      	add	sp, #8
 8001578:	bcf0      	pop	{r4, r5, r6, r7}
 800157a:	4770      	bx	lr
 800157c:	40021000 	.word	0x40021000
 8001580:	40010000 	.word	0x40010000
 8001584:	40010800 	.word	0x40010800
 8001588:	10210000 	.word	0x10210000
 800158c:	10310000 	.word	0x10310000
 8001590:	40010400 	.word	0x40010400

08001594 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001594:	6883      	ldr	r3, [r0, #8]
 8001596:	4219      	tst	r1, r3
 8001598:	d101      	bne.n	800159e <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800159a:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 800159c:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 800159e:	2001      	movs	r0, #1
 80015a0:	4770      	bx	lr

080015a2 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015a2:	b912      	cbnz	r2, 80015aa <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015a4:	0409      	lsls	r1, r1, #16
 80015a6:	6101      	str	r1, [r0, #16]
  }
}
 80015a8:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 80015aa:	6101      	str	r1, [r0, #16]
 80015ac:	4770      	bx	lr
	...

080015b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015b0:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015b2:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <RCC_Delay+0x24>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a08      	ldr	r2, [pc, #32]	; (80015d8 <RCC_Delay+0x28>)
 80015b8:	fba2 2303 	umull	r2, r3, r2, r3
 80015bc:	0a5b      	lsrs	r3, r3, #9
 80015be:	fb00 f003 	mul.w	r0, r0, r3
 80015c2:	9001      	str	r0, [sp, #4]
  do
  {
    __NOP();
 80015c4:	bf00      	nop
  }
  while (Delay --);
 80015c6:	9b01      	ldr	r3, [sp, #4]
 80015c8:	1e5a      	subs	r2, r3, #1
 80015ca:	9201      	str	r2, [sp, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d1f9      	bne.n	80015c4 <RCC_Delay+0x14>
}
 80015d0:	b002      	add	sp, #8
 80015d2:	4770      	bx	lr
 80015d4:	20000040 	.word	0x20000040
 80015d8:	10624dd3 	.word	0x10624dd3

080015dc <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80015dc:	2800      	cmp	r0, #0
 80015de:	f000 81f5 	beq.w	80019cc <HAL_RCC_OscConfig+0x3f0>
{
 80015e2:	b570      	push	{r4, r5, r6, lr}
 80015e4:	b082      	sub	sp, #8
 80015e6:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015e8:	6803      	ldr	r3, [r0, #0]
 80015ea:	f013 0f01 	tst.w	r3, #1
 80015ee:	d02c      	beq.n	800164a <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015f0:	4bab      	ldr	r3, [pc, #684]	; (80018a0 <HAL_RCC_OscConfig+0x2c4>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f003 030c 	and.w	r3, r3, #12
 80015f8:	2b04      	cmp	r3, #4
 80015fa:	d01d      	beq.n	8001638 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015fc:	4ba8      	ldr	r3, [pc, #672]	; (80018a0 <HAL_RCC_OscConfig+0x2c4>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f003 030c 	and.w	r3, r3, #12
 8001604:	2b08      	cmp	r3, #8
 8001606:	d012      	beq.n	800162e <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001608:	6863      	ldr	r3, [r4, #4]
 800160a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800160e:	d041      	beq.n	8001694 <HAL_RCC_OscConfig+0xb8>
 8001610:	2b00      	cmp	r3, #0
 8001612:	d155      	bne.n	80016c0 <HAL_RCC_OscConfig+0xe4>
 8001614:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001618:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	e037      	b.n	800169e <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800162e:	4b9c      	ldr	r3, [pc, #624]	; (80018a0 <HAL_RCC_OscConfig+0x2c4>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001636:	d0e7      	beq.n	8001608 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001638:	4b99      	ldr	r3, [pc, #612]	; (80018a0 <HAL_RCC_OscConfig+0x2c4>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001640:	d003      	beq.n	800164a <HAL_RCC_OscConfig+0x6e>
 8001642:	6863      	ldr	r3, [r4, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	f000 81c3 	beq.w	80019d0 <HAL_RCC_OscConfig+0x3f4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800164a:	6823      	ldr	r3, [r4, #0]
 800164c:	f013 0f02 	tst.w	r3, #2
 8001650:	d076      	beq.n	8001740 <HAL_RCC_OscConfig+0x164>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001652:	4b93      	ldr	r3, [pc, #588]	; (80018a0 <HAL_RCC_OscConfig+0x2c4>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f013 0f0c 	tst.w	r3, #12
 800165a:	d05f      	beq.n	800171c <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800165c:	4b90      	ldr	r3, [pc, #576]	; (80018a0 <HAL_RCC_OscConfig+0x2c4>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 030c 	and.w	r3, r3, #12
 8001664:	2b08      	cmp	r3, #8
 8001666:	d054      	beq.n	8001712 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001668:	6923      	ldr	r3, [r4, #16]
 800166a:	2b00      	cmp	r3, #0
 800166c:	f000 808a 	beq.w	8001784 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8001670:	4b8c      	ldr	r3, [pc, #560]	; (80018a4 <HAL_RCC_OscConfig+0x2c8>)
 8001672:	2201      	movs	r2, #1
 8001674:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001676:	f7ff fcbd 	bl	8000ff4 <HAL_GetTick>
 800167a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800167c:	4b88      	ldr	r3, [pc, #544]	; (80018a0 <HAL_RCC_OscConfig+0x2c4>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f013 0f02 	tst.w	r3, #2
 8001684:	d175      	bne.n	8001772 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001686:	f7ff fcb5 	bl	8000ff4 <HAL_GetTick>
 800168a:	1b40      	subs	r0, r0, r5
 800168c:	2802      	cmp	r0, #2
 800168e:	d9f5      	bls.n	800167c <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8001690:	2003      	movs	r0, #3
 8001692:	e1a0      	b.n	80019d6 <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001694:	4a82      	ldr	r2, [pc, #520]	; (80018a0 <HAL_RCC_OscConfig+0x2c4>)
 8001696:	6813      	ldr	r3, [r2, #0]
 8001698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800169c:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800169e:	6863      	ldr	r3, [r4, #4]
 80016a0:	b343      	cbz	r3, 80016f4 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 80016a2:	f7ff fca7 	bl	8000ff4 <HAL_GetTick>
 80016a6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a8:	4b7d      	ldr	r3, [pc, #500]	; (80018a0 <HAL_RCC_OscConfig+0x2c4>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80016b0:	d1cb      	bne.n	800164a <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016b2:	f7ff fc9f 	bl	8000ff4 <HAL_GetTick>
 80016b6:	1b40      	subs	r0, r0, r5
 80016b8:	2864      	cmp	r0, #100	; 0x64
 80016ba:	d9f5      	bls.n	80016a8 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 80016bc:	2003      	movs	r0, #3
 80016be:	e18a      	b.n	80019d6 <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016c4:	d009      	beq.n	80016da <HAL_RCC_OscConfig+0xfe>
 80016c6:	4b76      	ldr	r3, [pc, #472]	; (80018a0 <HAL_RCC_OscConfig+0x2c4>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	e7e1      	b.n	800169e <HAL_RCC_OscConfig+0xc2>
 80016da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80016de:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	e7d4      	b.n	800169e <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 80016f4:	f7ff fc7e 	bl	8000ff4 <HAL_GetTick>
 80016f8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016fa:	4b69      	ldr	r3, [pc, #420]	; (80018a0 <HAL_RCC_OscConfig+0x2c4>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001702:	d0a2      	beq.n	800164a <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001704:	f7ff fc76 	bl	8000ff4 <HAL_GetTick>
 8001708:	1b40      	subs	r0, r0, r5
 800170a:	2864      	cmp	r0, #100	; 0x64
 800170c:	d9f5      	bls.n	80016fa <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 800170e:	2003      	movs	r0, #3
 8001710:	e161      	b.n	80019d6 <HAL_RCC_OscConfig+0x3fa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001712:	4b63      	ldr	r3, [pc, #396]	; (80018a0 <HAL_RCC_OscConfig+0x2c4>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800171a:	d1a5      	bne.n	8001668 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800171c:	4b60      	ldr	r3, [pc, #384]	; (80018a0 <HAL_RCC_OscConfig+0x2c4>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f013 0f02 	tst.w	r3, #2
 8001724:	d004      	beq.n	8001730 <HAL_RCC_OscConfig+0x154>
 8001726:	6923      	ldr	r3, [r4, #16]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d001      	beq.n	8001730 <HAL_RCC_OscConfig+0x154>
        return HAL_ERROR;
 800172c:	2001      	movs	r0, #1
 800172e:	e152      	b.n	80019d6 <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001730:	4a5b      	ldr	r2, [pc, #364]	; (80018a0 <HAL_RCC_OscConfig+0x2c4>)
 8001732:	6813      	ldr	r3, [r2, #0]
 8001734:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001738:	6961      	ldr	r1, [r4, #20]
 800173a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800173e:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001740:	6823      	ldr	r3, [r4, #0]
 8001742:	f013 0f08 	tst.w	r3, #8
 8001746:	d032      	beq.n	80017ae <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001748:	69a3      	ldr	r3, [r4, #24]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d05b      	beq.n	8001806 <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 800174e:	4b56      	ldr	r3, [pc, #344]	; (80018a8 <HAL_RCC_OscConfig+0x2cc>)
 8001750:	2201      	movs	r2, #1
 8001752:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001754:	f7ff fc4e 	bl	8000ff4 <HAL_GetTick>
 8001758:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800175a:	4b51      	ldr	r3, [pc, #324]	; (80018a0 <HAL_RCC_OscConfig+0x2c4>)
 800175c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175e:	f013 0f02 	tst.w	r3, #2
 8001762:	d121      	bne.n	80017a8 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001764:	f7ff fc46 	bl	8000ff4 <HAL_GetTick>
 8001768:	1b40      	subs	r0, r0, r5
 800176a:	2802      	cmp	r0, #2
 800176c:	d9f5      	bls.n	800175a <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 800176e:	2003      	movs	r0, #3
 8001770:	e131      	b.n	80019d6 <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001772:	4a4b      	ldr	r2, [pc, #300]	; (80018a0 <HAL_RCC_OscConfig+0x2c4>)
 8001774:	6813      	ldr	r3, [r2, #0]
 8001776:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800177a:	6961      	ldr	r1, [r4, #20]
 800177c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001780:	6013      	str	r3, [r2, #0]
 8001782:	e7dd      	b.n	8001740 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8001784:	4b47      	ldr	r3, [pc, #284]	; (80018a4 <HAL_RCC_OscConfig+0x2c8>)
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800178a:	f7ff fc33 	bl	8000ff4 <HAL_GetTick>
 800178e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001790:	4b43      	ldr	r3, [pc, #268]	; (80018a0 <HAL_RCC_OscConfig+0x2c4>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f013 0f02 	tst.w	r3, #2
 8001798:	d0d2      	beq.n	8001740 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800179a:	f7ff fc2b 	bl	8000ff4 <HAL_GetTick>
 800179e:	1b40      	subs	r0, r0, r5
 80017a0:	2802      	cmp	r0, #2
 80017a2:	d9f5      	bls.n	8001790 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 80017a4:	2003      	movs	r0, #3
 80017a6:	e116      	b.n	80019d6 <HAL_RCC_OscConfig+0x3fa>
      RCC_Delay(1);
 80017a8:	2001      	movs	r0, #1
 80017aa:	f7ff ff01 	bl	80015b0 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ae:	6823      	ldr	r3, [r4, #0]
 80017b0:	f013 0f04 	tst.w	r3, #4
 80017b4:	f000 8098 	beq.w	80018e8 <HAL_RCC_OscConfig+0x30c>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017b8:	4b39      	ldr	r3, [pc, #228]	; (80018a0 <HAL_RCC_OscConfig+0x2c4>)
 80017ba:	69db      	ldr	r3, [r3, #28]
 80017bc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80017c0:	d133      	bne.n	800182a <HAL_RCC_OscConfig+0x24e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80017c2:	4b37      	ldr	r3, [pc, #220]	; (80018a0 <HAL_RCC_OscConfig+0x2c4>)
 80017c4:	69da      	ldr	r2, [r3, #28]
 80017c6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80017ca:	61da      	str	r2, [r3, #28]
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d2:	9301      	str	r3, [sp, #4]
 80017d4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80017d6:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d8:	4b34      	ldr	r3, [pc, #208]	; (80018ac <HAL_RCC_OscConfig+0x2d0>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f413 7f80 	tst.w	r3, #256	; 0x100
 80017e0:	d025      	beq.n	800182e <HAL_RCC_OscConfig+0x252>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017e2:	68e3      	ldr	r3, [r4, #12]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d036      	beq.n	8001856 <HAL_RCC_OscConfig+0x27a>
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d14c      	bne.n	8001886 <HAL_RCC_OscConfig+0x2aa>
 80017ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80017f0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80017f4:	6a1a      	ldr	r2, [r3, #32]
 80017f6:	f022 0201 	bic.w	r2, r2, #1
 80017fa:	621a      	str	r2, [r3, #32]
 80017fc:	6a1a      	ldr	r2, [r3, #32]
 80017fe:	f022 0204 	bic.w	r2, r2, #4
 8001802:	621a      	str	r2, [r3, #32]
 8001804:	e02c      	b.n	8001860 <HAL_RCC_OscConfig+0x284>
      __HAL_RCC_LSI_DISABLE();
 8001806:	4b28      	ldr	r3, [pc, #160]	; (80018a8 <HAL_RCC_OscConfig+0x2cc>)
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800180c:	f7ff fbf2 	bl	8000ff4 <HAL_GetTick>
 8001810:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001812:	4b23      	ldr	r3, [pc, #140]	; (80018a0 <HAL_RCC_OscConfig+0x2c4>)
 8001814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001816:	f013 0f02 	tst.w	r3, #2
 800181a:	d0c8      	beq.n	80017ae <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800181c:	f7ff fbea 	bl	8000ff4 <HAL_GetTick>
 8001820:	1b40      	subs	r0, r0, r5
 8001822:	2802      	cmp	r0, #2
 8001824:	d9f5      	bls.n	8001812 <HAL_RCC_OscConfig+0x236>
          return HAL_TIMEOUT;
 8001826:	2003      	movs	r0, #3
 8001828:	e0d5      	b.n	80019d6 <HAL_RCC_OscConfig+0x3fa>
    FlagStatus       pwrclkchanged = RESET;
 800182a:	2500      	movs	r5, #0
 800182c:	e7d4      	b.n	80017d8 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800182e:	4a1f      	ldr	r2, [pc, #124]	; (80018ac <HAL_RCC_OscConfig+0x2d0>)
 8001830:	6813      	ldr	r3, [r2, #0]
 8001832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001836:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001838:	f7ff fbdc 	bl	8000ff4 <HAL_GetTick>
 800183c:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800183e:	4b1b      	ldr	r3, [pc, #108]	; (80018ac <HAL_RCC_OscConfig+0x2d0>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001846:	d1cc      	bne.n	80017e2 <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001848:	f7ff fbd4 	bl	8000ff4 <HAL_GetTick>
 800184c:	1b80      	subs	r0, r0, r6
 800184e:	2864      	cmp	r0, #100	; 0x64
 8001850:	d9f5      	bls.n	800183e <HAL_RCC_OscConfig+0x262>
          return HAL_TIMEOUT;
 8001852:	2003      	movs	r0, #3
 8001854:	e0bf      	b.n	80019d6 <HAL_RCC_OscConfig+0x3fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001856:	4a12      	ldr	r2, [pc, #72]	; (80018a0 <HAL_RCC_OscConfig+0x2c4>)
 8001858:	6a13      	ldr	r3, [r2, #32]
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001860:	68e3      	ldr	r3, [r4, #12]
 8001862:	b37b      	cbz	r3, 80018c4 <HAL_RCC_OscConfig+0x2e8>
      tickstart = HAL_GetTick();
 8001864:	f7ff fbc6 	bl	8000ff4 <HAL_GetTick>
 8001868:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800186a:	4b0d      	ldr	r3, [pc, #52]	; (80018a0 <HAL_RCC_OscConfig+0x2c4>)
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	f013 0f02 	tst.w	r3, #2
 8001872:	d138      	bne.n	80018e6 <HAL_RCC_OscConfig+0x30a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001874:	f7ff fbbe 	bl	8000ff4 <HAL_GetTick>
 8001878:	1b80      	subs	r0, r0, r6
 800187a:	f241 3388 	movw	r3, #5000	; 0x1388
 800187e:	4298      	cmp	r0, r3
 8001880:	d9f3      	bls.n	800186a <HAL_RCC_OscConfig+0x28e>
          return HAL_TIMEOUT;
 8001882:	2003      	movs	r0, #3
 8001884:	e0a7      	b.n	80019d6 <HAL_RCC_OscConfig+0x3fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001886:	2b05      	cmp	r3, #5
 8001888:	d012      	beq.n	80018b0 <HAL_RCC_OscConfig+0x2d4>
 800188a:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <HAL_RCC_OscConfig+0x2c4>)
 800188c:	6a1a      	ldr	r2, [r3, #32]
 800188e:	f022 0201 	bic.w	r2, r2, #1
 8001892:	621a      	str	r2, [r3, #32]
 8001894:	6a1a      	ldr	r2, [r3, #32]
 8001896:	f022 0204 	bic.w	r2, r2, #4
 800189a:	621a      	str	r2, [r3, #32]
 800189c:	e7e0      	b.n	8001860 <HAL_RCC_OscConfig+0x284>
 800189e:	bf00      	nop
 80018a0:	40021000 	.word	0x40021000
 80018a4:	42420000 	.word	0x42420000
 80018a8:	42420480 	.word	0x42420480
 80018ac:	40007000 	.word	0x40007000
 80018b0:	4b4c      	ldr	r3, [pc, #304]	; (80019e4 <HAL_RCC_OscConfig+0x408>)
 80018b2:	6a1a      	ldr	r2, [r3, #32]
 80018b4:	f042 0204 	orr.w	r2, r2, #4
 80018b8:	621a      	str	r2, [r3, #32]
 80018ba:	6a1a      	ldr	r2, [r3, #32]
 80018bc:	f042 0201 	orr.w	r2, r2, #1
 80018c0:	621a      	str	r2, [r3, #32]
 80018c2:	e7cd      	b.n	8001860 <HAL_RCC_OscConfig+0x284>
      tickstart = HAL_GetTick();
 80018c4:	f7ff fb96 	bl	8000ff4 <HAL_GetTick>
 80018c8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ca:	4b46      	ldr	r3, [pc, #280]	; (80019e4 <HAL_RCC_OscConfig+0x408>)
 80018cc:	6a1b      	ldr	r3, [r3, #32]
 80018ce:	f013 0f02 	tst.w	r3, #2
 80018d2:	d008      	beq.n	80018e6 <HAL_RCC_OscConfig+0x30a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018d4:	f7ff fb8e 	bl	8000ff4 <HAL_GetTick>
 80018d8:	1b80      	subs	r0, r0, r6
 80018da:	f241 3388 	movw	r3, #5000	; 0x1388
 80018de:	4298      	cmp	r0, r3
 80018e0:	d9f3      	bls.n	80018ca <HAL_RCC_OscConfig+0x2ee>
          return HAL_TIMEOUT;
 80018e2:	2003      	movs	r0, #3
 80018e4:	e077      	b.n	80019d6 <HAL_RCC_OscConfig+0x3fa>
    if (pwrclkchanged == SET)
 80018e6:	b9e5      	cbnz	r5, 8001922 <HAL_RCC_OscConfig+0x346>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018e8:	69e3      	ldr	r3, [r4, #28]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d072      	beq.n	80019d4 <HAL_RCC_OscConfig+0x3f8>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018ee:	4a3d      	ldr	r2, [pc, #244]	; (80019e4 <HAL_RCC_OscConfig+0x408>)
 80018f0:	6852      	ldr	r2, [r2, #4]
 80018f2:	f002 020c 	and.w	r2, r2, #12
 80018f6:	2a08      	cmp	r2, #8
 80018f8:	d056      	beq.n	80019a8 <HAL_RCC_OscConfig+0x3cc>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d017      	beq.n	800192e <HAL_RCC_OscConfig+0x352>
        __HAL_RCC_PLL_DISABLE();
 80018fe:	4b3a      	ldr	r3, [pc, #232]	; (80019e8 <HAL_RCC_OscConfig+0x40c>)
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001904:	f7ff fb76 	bl	8000ff4 <HAL_GetTick>
 8001908:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800190a:	4b36      	ldr	r3, [pc, #216]	; (80019e4 <HAL_RCC_OscConfig+0x408>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001912:	d047      	beq.n	80019a4 <HAL_RCC_OscConfig+0x3c8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001914:	f7ff fb6e 	bl	8000ff4 <HAL_GetTick>
 8001918:	1b00      	subs	r0, r0, r4
 800191a:	2802      	cmp	r0, #2
 800191c:	d9f5      	bls.n	800190a <HAL_RCC_OscConfig+0x32e>
            return HAL_TIMEOUT;
 800191e:	2003      	movs	r0, #3
 8001920:	e059      	b.n	80019d6 <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001922:	4a30      	ldr	r2, [pc, #192]	; (80019e4 <HAL_RCC_OscConfig+0x408>)
 8001924:	69d3      	ldr	r3, [r2, #28]
 8001926:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800192a:	61d3      	str	r3, [r2, #28]
 800192c:	e7dc      	b.n	80018e8 <HAL_RCC_OscConfig+0x30c>
        __HAL_RCC_PLL_DISABLE();
 800192e:	4b2e      	ldr	r3, [pc, #184]	; (80019e8 <HAL_RCC_OscConfig+0x40c>)
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001934:	f7ff fb5e 	bl	8000ff4 <HAL_GetTick>
 8001938:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800193a:	4b2a      	ldr	r3, [pc, #168]	; (80019e4 <HAL_RCC_OscConfig+0x408>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001942:	d006      	beq.n	8001952 <HAL_RCC_OscConfig+0x376>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001944:	f7ff fb56 	bl	8000ff4 <HAL_GetTick>
 8001948:	1b40      	subs	r0, r0, r5
 800194a:	2802      	cmp	r0, #2
 800194c:	d9f5      	bls.n	800193a <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 800194e:	2003      	movs	r0, #3
 8001950:	e041      	b.n	80019d6 <HAL_RCC_OscConfig+0x3fa>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001952:	6a23      	ldr	r3, [r4, #32]
 8001954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001958:	d01a      	beq.n	8001990 <HAL_RCC_OscConfig+0x3b4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800195a:	4922      	ldr	r1, [pc, #136]	; (80019e4 <HAL_RCC_OscConfig+0x408>)
 800195c:	684b      	ldr	r3, [r1, #4]
 800195e:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8001962:	6a22      	ldr	r2, [r4, #32]
 8001964:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001966:	4302      	orrs	r2, r0
 8001968:	4313      	orrs	r3, r2
 800196a:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 800196c:	4b1e      	ldr	r3, [pc, #120]	; (80019e8 <HAL_RCC_OscConfig+0x40c>)
 800196e:	2201      	movs	r2, #1
 8001970:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001972:	f7ff fb3f 	bl	8000ff4 <HAL_GetTick>
 8001976:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001978:	4b1a      	ldr	r3, [pc, #104]	; (80019e4 <HAL_RCC_OscConfig+0x408>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001980:	d10e      	bne.n	80019a0 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001982:	f7ff fb37 	bl	8000ff4 <HAL_GetTick>
 8001986:	1b00      	subs	r0, r0, r4
 8001988:	2802      	cmp	r0, #2
 800198a:	d9f5      	bls.n	8001978 <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 800198c:	2003      	movs	r0, #3
 800198e:	e022      	b.n	80019d6 <HAL_RCC_OscConfig+0x3fa>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001990:	4a14      	ldr	r2, [pc, #80]	; (80019e4 <HAL_RCC_OscConfig+0x408>)
 8001992:	6853      	ldr	r3, [r2, #4]
 8001994:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001998:	68a1      	ldr	r1, [r4, #8]
 800199a:	430b      	orrs	r3, r1
 800199c:	6053      	str	r3, [r2, #4]
 800199e:	e7dc      	b.n	800195a <HAL_RCC_OscConfig+0x37e>
  return HAL_OK;
 80019a0:	2000      	movs	r0, #0
 80019a2:	e018      	b.n	80019d6 <HAL_RCC_OscConfig+0x3fa>
 80019a4:	2000      	movs	r0, #0
 80019a6:	e016      	b.n	80019d6 <HAL_RCC_OscConfig+0x3fa>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d016      	beq.n	80019da <HAL_RCC_OscConfig+0x3fe>
        pll_config = RCC->CFGR;
 80019ac:	4b0d      	ldr	r3, [pc, #52]	; (80019e4 <HAL_RCC_OscConfig+0x408>)
 80019ae:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b0:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80019b4:	6a22      	ldr	r2, [r4, #32]
 80019b6:	4291      	cmp	r1, r2
 80019b8:	d001      	beq.n	80019be <HAL_RCC_OscConfig+0x3e2>
          return HAL_ERROR;
 80019ba:	2001      	movs	r0, #1
 80019bc:	e00b      	b.n	80019d6 <HAL_RCC_OscConfig+0x3fa>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019be:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80019c2:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d00a      	beq.n	80019de <HAL_RCC_OscConfig+0x402>
          return HAL_ERROR;
 80019c8:	2001      	movs	r0, #1
 80019ca:	e004      	b.n	80019d6 <HAL_RCC_OscConfig+0x3fa>
    return HAL_ERROR;
 80019cc:	2001      	movs	r0, #1
}
 80019ce:	4770      	bx	lr
        return HAL_ERROR;
 80019d0:	2001      	movs	r0, #1
 80019d2:	e000      	b.n	80019d6 <HAL_RCC_OscConfig+0x3fa>
  return HAL_OK;
 80019d4:	2000      	movs	r0, #0
}
 80019d6:	b002      	add	sp, #8
 80019d8:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80019da:	2001      	movs	r0, #1
 80019dc:	e7fb      	b.n	80019d6 <HAL_RCC_OscConfig+0x3fa>
  return HAL_OK;
 80019de:	2000      	movs	r0, #0
 80019e0:	e7f9      	b.n	80019d6 <HAL_RCC_OscConfig+0x3fa>
 80019e2:	bf00      	nop
 80019e4:	40021000 	.word	0x40021000
 80019e8:	42420060 	.word	0x42420060

080019ec <HAL_RCC_GetSysClockFreq>:
{
 80019ec:	b410      	push	{r4}
 80019ee:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80019f0:	4c16      	ldr	r4, [pc, #88]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x60>)
 80019f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80019f6:	f10d 0c18 	add.w	ip, sp, #24
 80019fa:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80019fe:	8a23      	ldrh	r3, [r4, #16]
 8001a00:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001a04:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x64>)
 8001a06:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001a08:	f003 020c 	and.w	r2, r3, #12
 8001a0c:	2a08      	cmp	r2, #8
 8001a0e:	d11a      	bne.n	8001a46 <HAL_RCC_GetSysClockFreq+0x5a>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a10:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001a14:	4462      	add	r2, ip
 8001a16:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a1a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001a1e:	d105      	bne.n	8001a2c <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a20:	480c      	ldr	r0, [pc, #48]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x68>)
 8001a22:	fb00 f002 	mul.w	r0, r0, r2
}
 8001a26:	b007      	add	sp, #28
 8001a28:	bc10      	pop	{r4}
 8001a2a:	4770      	bx	lr
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a2c:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x64>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8001a34:	4463      	add	r3, ip
 8001a36:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a3a:	4807      	ldr	r0, [pc, #28]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x6c>)
 8001a3c:	fb00 f002 	mul.w	r0, r0, r2
 8001a40:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a44:	e7ef      	b.n	8001a26 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSE_VALUE;
 8001a46:	4804      	ldr	r0, [pc, #16]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8001a48:	e7ed      	b.n	8001a26 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a4a:	bf00      	nop
 8001a4c:	08003258 	.word	0x08003258
 8001a50:	40021000 	.word	0x40021000
 8001a54:	003d0900 	.word	0x003d0900
 8001a58:	007a1200 	.word	0x007a1200

08001a5c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001a5c:	2800      	cmp	r0, #0
 8001a5e:	f000 80a3 	beq.w	8001ba8 <HAL_RCC_ClockConfig+0x14c>
{
 8001a62:	b570      	push	{r4, r5, r6, lr}
 8001a64:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a66:	4b52      	ldr	r3, [pc, #328]	; (8001bb0 <HAL_RCC_ClockConfig+0x154>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	428b      	cmp	r3, r1
 8001a70:	d20c      	bcs.n	8001a8c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a72:	4a4f      	ldr	r2, [pc, #316]	; (8001bb0 <HAL_RCC_ClockConfig+0x154>)
 8001a74:	6813      	ldr	r3, [r2, #0]
 8001a76:	f023 0307 	bic.w	r3, r3, #7
 8001a7a:	430b      	orrs	r3, r1
 8001a7c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a7e:	6813      	ldr	r3, [r2, #0]
 8001a80:	f003 0307 	and.w	r3, r3, #7
 8001a84:	428b      	cmp	r3, r1
 8001a86:	d001      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 8001a88:	2001      	movs	r0, #1
}
 8001a8a:	bd70      	pop	{r4, r5, r6, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a8c:	6823      	ldr	r3, [r4, #0]
 8001a8e:	f013 0f02 	tst.w	r3, #2
 8001a92:	d017      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a94:	f013 0f04 	tst.w	r3, #4
 8001a98:	d004      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a9a:	4a46      	ldr	r2, [pc, #280]	; (8001bb4 <HAL_RCC_ClockConfig+0x158>)
 8001a9c:	6853      	ldr	r3, [r2, #4]
 8001a9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001aa2:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa4:	6823      	ldr	r3, [r4, #0]
 8001aa6:	f013 0f08 	tst.w	r3, #8
 8001aaa:	d004      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001aac:	4a41      	ldr	r2, [pc, #260]	; (8001bb4 <HAL_RCC_ClockConfig+0x158>)
 8001aae:	6853      	ldr	r3, [r2, #4]
 8001ab0:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ab4:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ab6:	4a3f      	ldr	r2, [pc, #252]	; (8001bb4 <HAL_RCC_ClockConfig+0x158>)
 8001ab8:	6853      	ldr	r3, [r2, #4]
 8001aba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001abe:	68a0      	ldr	r0, [r4, #8]
 8001ac0:	4303      	orrs	r3, r0
 8001ac2:	6053      	str	r3, [r2, #4]
 8001ac4:	460d      	mov	r5, r1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ac6:	6823      	ldr	r3, [r4, #0]
 8001ac8:	f013 0f01 	tst.w	r3, #1
 8001acc:	d031      	beq.n	8001b32 <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ace:	6863      	ldr	r3, [r4, #4]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d020      	beq.n	8001b16 <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d025      	beq.n	8001b24 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad8:	4a36      	ldr	r2, [pc, #216]	; (8001bb4 <HAL_RCC_ClockConfig+0x158>)
 8001ada:	6812      	ldr	r2, [r2, #0]
 8001adc:	f012 0f02 	tst.w	r2, #2
 8001ae0:	d064      	beq.n	8001bac <HAL_RCC_ClockConfig+0x150>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ae2:	4934      	ldr	r1, [pc, #208]	; (8001bb4 <HAL_RCC_ClockConfig+0x158>)
 8001ae4:	684a      	ldr	r2, [r1, #4]
 8001ae6:	f022 0203 	bic.w	r2, r2, #3
 8001aea:	4313      	orrs	r3, r2
 8001aec:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8001aee:	f7ff fa81 	bl	8000ff4 <HAL_GetTick>
 8001af2:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001af4:	4b2f      	ldr	r3, [pc, #188]	; (8001bb4 <HAL_RCC_ClockConfig+0x158>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 030c 	and.w	r3, r3, #12
 8001afc:	6862      	ldr	r2, [r4, #4]
 8001afe:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001b02:	d016      	beq.n	8001b32 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b04:	f7ff fa76 	bl	8000ff4 <HAL_GetTick>
 8001b08:	1b80      	subs	r0, r0, r6
 8001b0a:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b0e:	4298      	cmp	r0, r3
 8001b10:	d9f0      	bls.n	8001af4 <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 8001b12:	2003      	movs	r0, #3
 8001b14:	e7b9      	b.n	8001a8a <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b16:	4a27      	ldr	r2, [pc, #156]	; (8001bb4 <HAL_RCC_ClockConfig+0x158>)
 8001b18:	6812      	ldr	r2, [r2, #0]
 8001b1a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001b1e:	d1e0      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8001b20:	2001      	movs	r0, #1
 8001b22:	e7b2      	b.n	8001a8a <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b24:	4a23      	ldr	r2, [pc, #140]	; (8001bb4 <HAL_RCC_ClockConfig+0x158>)
 8001b26:	6812      	ldr	r2, [r2, #0]
 8001b28:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001b2c:	d1d9      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8001b2e:	2001      	movs	r0, #1
 8001b30:	e7ab      	b.n	8001a8a <HAL_RCC_ClockConfig+0x2e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b32:	4b1f      	ldr	r3, [pc, #124]	; (8001bb0 <HAL_RCC_ClockConfig+0x154>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	42ab      	cmp	r3, r5
 8001b3c:	d90c      	bls.n	8001b58 <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3e:	4a1c      	ldr	r2, [pc, #112]	; (8001bb0 <HAL_RCC_ClockConfig+0x154>)
 8001b40:	6813      	ldr	r3, [r2, #0]
 8001b42:	f023 0307 	bic.w	r3, r3, #7
 8001b46:	432b      	orrs	r3, r5
 8001b48:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b4a:	6813      	ldr	r3, [r2, #0]
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	42ab      	cmp	r3, r5
 8001b52:	d001      	beq.n	8001b58 <HAL_RCC_ClockConfig+0xfc>
    return HAL_ERROR;
 8001b54:	2001      	movs	r0, #1
 8001b56:	e798      	b.n	8001a8a <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b58:	6823      	ldr	r3, [r4, #0]
 8001b5a:	f013 0f04 	tst.w	r3, #4
 8001b5e:	d006      	beq.n	8001b6e <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b60:	4a14      	ldr	r2, [pc, #80]	; (8001bb4 <HAL_RCC_ClockConfig+0x158>)
 8001b62:	6853      	ldr	r3, [r2, #4]
 8001b64:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b68:	68e1      	ldr	r1, [r4, #12]
 8001b6a:	430b      	orrs	r3, r1
 8001b6c:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b6e:	6823      	ldr	r3, [r4, #0]
 8001b70:	f013 0f08 	tst.w	r3, #8
 8001b74:	d007      	beq.n	8001b86 <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b76:	4a0f      	ldr	r2, [pc, #60]	; (8001bb4 <HAL_RCC_ClockConfig+0x158>)
 8001b78:	6853      	ldr	r3, [r2, #4]
 8001b7a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001b7e:	6921      	ldr	r1, [r4, #16]
 8001b80:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001b84:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b86:	f7ff ff31 	bl	80019ec <HAL_RCC_GetSysClockFreq>
 8001b8a:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <HAL_RCC_ClockConfig+0x158>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001b92:	4a09      	ldr	r2, [pc, #36]	; (8001bb8 <HAL_RCC_ClockConfig+0x15c>)
 8001b94:	5cd3      	ldrb	r3, [r2, r3]
 8001b96:	40d8      	lsrs	r0, r3
 8001b98:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <HAL_RCC_ClockConfig+0x160>)
 8001b9a:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001b9c:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <HAL_RCC_ClockConfig+0x164>)
 8001b9e:	6818      	ldr	r0, [r3, #0]
 8001ba0:	f7ff f9e6 	bl	8000f70 <HAL_InitTick>
  return HAL_OK;
 8001ba4:	2000      	movs	r0, #0
 8001ba6:	e770      	b.n	8001a8a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8001ba8:	2001      	movs	r0, #1
}
 8001baa:	4770      	bx	lr
        return HAL_ERROR;
 8001bac:	2001      	movs	r0, #1
 8001bae:	e76c      	b.n	8001a8a <HAL_RCC_ClockConfig+0x2e>
 8001bb0:	40022000 	.word	0x40022000
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	0800326c 	.word	0x0800326c
 8001bbc:	20000040 	.word	0x20000040
 8001bc0:	20000004 	.word	0x20000004

08001bc4 <HAL_RCC_GetHCLKFreq>:
}
 8001bc4:	4b01      	ldr	r3, [pc, #4]	; (8001bcc <HAL_RCC_GetHCLKFreq+0x8>)
 8001bc6:	6818      	ldr	r0, [r3, #0]
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	20000040 	.word	0x20000040

08001bd0 <HAL_RCC_GetPCLK1Freq>:
{
 8001bd0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bd2:	f7ff fff7 	bl	8001bc4 <HAL_RCC_GetHCLKFreq>
 8001bd6:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001bde:	4a03      	ldr	r2, [pc, #12]	; (8001bec <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001be0:	5cd3      	ldrb	r3, [r2, r3]
}
 8001be2:	40d8      	lsrs	r0, r3
 8001be4:	bd08      	pop	{r3, pc}
 8001be6:	bf00      	nop
 8001be8:	40021000 	.word	0x40021000
 8001bec:	0800327c 	.word	0x0800327c

08001bf0 <HAL_RCC_GetPCLK2Freq>:
{
 8001bf0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bf2:	f7ff ffe7 	bl	8001bc4 <HAL_RCC_GetHCLKFreq>
 8001bf6:	4b04      	ldr	r3, [pc, #16]	; (8001c08 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001bfe:	4a03      	ldr	r2, [pc, #12]	; (8001c0c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001c00:	5cd3      	ldrb	r3, [r2, r3]
}
 8001c02:	40d8      	lsrs	r0, r3
 8001c04:	bd08      	pop	{r3, pc}
 8001c06:	bf00      	nop
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	0800327c 	.word	0x0800327c

08001c10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001c10:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c12:	6a03      	ldr	r3, [r0, #32]
 8001c14:	f023 0301 	bic.w	r3, r3, #1
 8001c18:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c1a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c1c:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001c1e:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001c20:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001c24:	680d      	ldr	r5, [r1, #0]
 8001c26:	ea45 0604 	orr.w	r6, r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001c2a:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001c2e:	688b      	ldr	r3, [r1, #8]
 8001c30:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001c32:	4d0d      	ldr	r5, [pc, #52]	; (8001c68 <TIM_OC1_SetConfig+0x58>)
 8001c34:	42a8      	cmp	r0, r5
 8001c36:	d009      	beq.n	8001c4c <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c38:	4d0b      	ldr	r5, [pc, #44]	; (8001c68 <TIM_OC1_SetConfig+0x58>)
 8001c3a:	42a8      	cmp	r0, r5
 8001c3c:	d00d      	beq.n	8001c5a <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c3e:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001c40:	6186      	str	r6, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001c42:	684a      	ldr	r2, [r1, #4]
 8001c44:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c46:	6203      	str	r3, [r0, #32]
}
 8001c48:	bc70      	pop	{r4, r5, r6}
 8001c4a:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8001c4c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001c50:	68cc      	ldr	r4, [r1, #12]
 8001c52:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8001c54:	f023 0304 	bic.w	r3, r3, #4
 8001c58:	e7ee      	b.n	8001c38 <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001c5a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8001c5e:	694c      	ldr	r4, [r1, #20]
 8001c60:	4314      	orrs	r4, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 8001c62:	698a      	ldr	r2, [r1, #24]
 8001c64:	4322      	orrs	r2, r4
 8001c66:	e7ea      	b.n	8001c3e <TIM_OC1_SetConfig+0x2e>
 8001c68:	40012c00 	.word	0x40012c00

08001c6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001c6c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001c6e:	6a03      	ldr	r3, [r0, #32]
 8001c70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c74:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c76:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c78:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001c7a:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001c7c:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001c80:	680d      	ldr	r5, [r1, #0]
 8001c82:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001c84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001c88:	688d      	ldr	r5, [r1, #8]
 8001c8a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001c8e:	4d0f      	ldr	r5, [pc, #60]	; (8001ccc <TIM_OC3_SetConfig+0x60>)
 8001c90:	42a8      	cmp	r0, r5
 8001c92:	d009      	beq.n	8001ca8 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c94:	4d0d      	ldr	r5, [pc, #52]	; (8001ccc <TIM_OC3_SetConfig+0x60>)
 8001c96:	42a8      	cmp	r0, r5
 8001c98:	d00e      	beq.n	8001cb8 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c9a:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001c9c:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001c9e:	684a      	ldr	r2, [r1, #4]
 8001ca0:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ca2:	6203      	str	r3, [r0, #32]
}
 8001ca4:	bc30      	pop	{r4, r5}
 8001ca6:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8001ca8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001cac:	68cd      	ldr	r5, [r1, #12]
 8001cae:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8001cb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001cb6:	e7ed      	b.n	8001c94 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001cb8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001cbc:	694d      	ldr	r5, [r1, #20]
 8001cbe:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001cc2:	698d      	ldr	r5, [r1, #24]
 8001cc4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8001cc8:	e7e7      	b.n	8001c9a <TIM_OC3_SetConfig+0x2e>
 8001cca:	bf00      	nop
 8001ccc:	40012c00 	.word	0x40012c00

08001cd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001cd0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001cd2:	6a03      	ldr	r3, [r0, #32]
 8001cd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001cd8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001cda:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001cdc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001cde:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001ce0:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ce4:	680d      	ldr	r5, [r1, #0]
 8001ce6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001cea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001cee:	688d      	ldr	r5, [r1, #8]
 8001cf0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001cf4:	4d07      	ldr	r5, [pc, #28]	; (8001d14 <TIM_OC4_SetConfig+0x44>)
 8001cf6:	42a8      	cmp	r0, r5
 8001cf8:	d006      	beq.n	8001d08 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001cfa:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001cfc:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001cfe:	684a      	ldr	r2, [r1, #4]
 8001d00:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d02:	6203      	str	r3, [r0, #32]
}
 8001d04:	bc30      	pop	{r4, r5}
 8001d06:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001d08:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001d0c:	694d      	ldr	r5, [r1, #20]
 8001d0e:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8001d12:	e7f2      	b.n	8001cfa <TIM_OC4_SetConfig+0x2a>
 8001d14:	40012c00 	.word	0x40012c00

08001d18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001d18:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001d1a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d1c:	6a04      	ldr	r4, [r0, #32]
 8001d1e:	f024 0401 	bic.w	r4, r4, #1
 8001d22:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d24:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d26:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001d2a:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d2e:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8001d32:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001d34:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001d36:	6203      	str	r3, [r0, #32]
}
 8001d38:	bc10      	pop	{r4}
 8001d3a:	4770      	bx	lr

08001d3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001d3c:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d3e:	6a03      	ldr	r3, [r0, #32]
 8001d40:	f023 0310 	bic.w	r3, r3, #16
 8001d44:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d46:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001d48:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001d4a:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001d4e:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001d52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001d56:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001d5a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001d5c:	6203      	str	r3, [r0, #32]
}
 8001d5e:	bc10      	pop	{r4}
 8001d60:	4770      	bx	lr

08001d62 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001d62:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001d64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001d68:	4319      	orrs	r1, r3
 8001d6a:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d6e:	6081      	str	r1, [r0, #8]
}
 8001d70:	4770      	bx	lr

08001d72 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d72:	6802      	ldr	r2, [r0, #0]
 8001d74:	68d3      	ldr	r3, [r2, #12]
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d7c:	6802      	ldr	r2, [r0, #0]
 8001d7e:	6893      	ldr	r3, [r2, #8]
 8001d80:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d84:	2b06      	cmp	r3, #6
 8001d86:	d003      	beq.n	8001d90 <HAL_TIM_Base_Start_IT+0x1e>
    __HAL_TIM_ENABLE(htim);
 8001d88:	6813      	ldr	r3, [r2, #0]
 8001d8a:	f043 0301 	orr.w	r3, r3, #1
 8001d8e:	6013      	str	r3, [r2, #0]
}
 8001d90:	2000      	movs	r0, #0
 8001d92:	4770      	bx	lr

08001d94 <HAL_TIM_PWM_MspInit>:
}
 8001d94:	4770      	bx	lr

08001d96 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8001d96:	4770      	bx	lr

08001d98 <HAL_TIM_IC_CaptureCallback>:
}
 8001d98:	4770      	bx	lr

08001d9a <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8001d9a:	4770      	bx	lr

08001d9c <HAL_TIM_TriggerCallback>:
}
 8001d9c:	4770      	bx	lr

08001d9e <HAL_TIM_IRQHandler>:
{
 8001d9e:	b510      	push	{r4, lr}
 8001da0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001da2:	6803      	ldr	r3, [r0, #0]
 8001da4:	691a      	ldr	r2, [r3, #16]
 8001da6:	f012 0f02 	tst.w	r2, #2
 8001daa:	d011      	beq.n	8001dd0 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001dac:	68da      	ldr	r2, [r3, #12]
 8001dae:	f012 0f02 	tst.w	r2, #2
 8001db2:	d00d      	beq.n	8001dd0 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001db4:	f06f 0202 	mvn.w	r2, #2
 8001db8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dbe:	6803      	ldr	r3, [r0, #0]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	f013 0f03 	tst.w	r3, #3
 8001dc6:	d070      	beq.n	8001eaa <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8001dc8:	f7ff ffe6 	bl	8001d98 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001dd0:	6823      	ldr	r3, [r4, #0]
 8001dd2:	691a      	ldr	r2, [r3, #16]
 8001dd4:	f012 0f04 	tst.w	r2, #4
 8001dd8:	d012      	beq.n	8001e00 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001dda:	68da      	ldr	r2, [r3, #12]
 8001ddc:	f012 0f04 	tst.w	r2, #4
 8001de0:	d00e      	beq.n	8001e00 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001de2:	f06f 0204 	mvn.w	r2, #4
 8001de6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001de8:	2302      	movs	r3, #2
 8001dea:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dec:	6823      	ldr	r3, [r4, #0]
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001df4:	d05f      	beq.n	8001eb6 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8001df6:	4620      	mov	r0, r4
 8001df8:	f7ff ffce 	bl	8001d98 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e00:	6823      	ldr	r3, [r4, #0]
 8001e02:	691a      	ldr	r2, [r3, #16]
 8001e04:	f012 0f08 	tst.w	r2, #8
 8001e08:	d012      	beq.n	8001e30 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e0a:	68da      	ldr	r2, [r3, #12]
 8001e0c:	f012 0f08 	tst.w	r2, #8
 8001e10:	d00e      	beq.n	8001e30 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e12:	f06f 0208 	mvn.w	r2, #8
 8001e16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e18:	2304      	movs	r3, #4
 8001e1a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e1c:	6823      	ldr	r3, [r4, #0]
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	f013 0f03 	tst.w	r3, #3
 8001e24:	d04e      	beq.n	8001ec4 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8001e26:	4620      	mov	r0, r4
 8001e28:	f7ff ffb6 	bl	8001d98 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e30:	6823      	ldr	r3, [r4, #0]
 8001e32:	691a      	ldr	r2, [r3, #16]
 8001e34:	f012 0f10 	tst.w	r2, #16
 8001e38:	d012      	beq.n	8001e60 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e3a:	68da      	ldr	r2, [r3, #12]
 8001e3c:	f012 0f10 	tst.w	r2, #16
 8001e40:	d00e      	beq.n	8001e60 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e42:	f06f 0210 	mvn.w	r2, #16
 8001e46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e48:	2308      	movs	r3, #8
 8001e4a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e4c:	6823      	ldr	r3, [r4, #0]
 8001e4e:	69db      	ldr	r3, [r3, #28]
 8001e50:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001e54:	d03d      	beq.n	8001ed2 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8001e56:	4620      	mov	r0, r4
 8001e58:	f7ff ff9e 	bl	8001d98 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e60:	6823      	ldr	r3, [r4, #0]
 8001e62:	691a      	ldr	r2, [r3, #16]
 8001e64:	f012 0f01 	tst.w	r2, #1
 8001e68:	d003      	beq.n	8001e72 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e6a:	68da      	ldr	r2, [r3, #12]
 8001e6c:	f012 0f01 	tst.w	r2, #1
 8001e70:	d136      	bne.n	8001ee0 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e72:	6823      	ldr	r3, [r4, #0]
 8001e74:	691a      	ldr	r2, [r3, #16]
 8001e76:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001e7a:	d003      	beq.n	8001e84 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e7c:	68da      	ldr	r2, [r3, #12]
 8001e7e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001e82:	d134      	bne.n	8001eee <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e84:	6823      	ldr	r3, [r4, #0]
 8001e86:	691a      	ldr	r2, [r3, #16]
 8001e88:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001e8c:	d003      	beq.n	8001e96 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e8e:	68da      	ldr	r2, [r3, #12]
 8001e90:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001e94:	d132      	bne.n	8001efc <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e96:	6823      	ldr	r3, [r4, #0]
 8001e98:	691a      	ldr	r2, [r3, #16]
 8001e9a:	f012 0f20 	tst.w	r2, #32
 8001e9e:	d003      	beq.n	8001ea8 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ea0:	68da      	ldr	r2, [r3, #12]
 8001ea2:	f012 0f20 	tst.w	r2, #32
 8001ea6:	d130      	bne.n	8001f0a <HAL_TIM_IRQHandler+0x16c>
}
 8001ea8:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eaa:	f7ff ff74 	bl	8001d96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eae:	4620      	mov	r0, r4
 8001eb0:	f7ff ff73 	bl	8001d9a <HAL_TIM_PWM_PulseFinishedCallback>
 8001eb4:	e78a      	b.n	8001dcc <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eb6:	4620      	mov	r0, r4
 8001eb8:	f7ff ff6d 	bl	8001d96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ebc:	4620      	mov	r0, r4
 8001ebe:	f7ff ff6c 	bl	8001d9a <HAL_TIM_PWM_PulseFinishedCallback>
 8001ec2:	e79b      	b.n	8001dfc <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ec4:	4620      	mov	r0, r4
 8001ec6:	f7ff ff66 	bl	8001d96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eca:	4620      	mov	r0, r4
 8001ecc:	f7ff ff65 	bl	8001d9a <HAL_TIM_PWM_PulseFinishedCallback>
 8001ed0:	e7ac      	b.n	8001e2c <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ed2:	4620      	mov	r0, r4
 8001ed4:	f7ff ff5f 	bl	8001d96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ed8:	4620      	mov	r0, r4
 8001eda:	f7ff ff5e 	bl	8001d9a <HAL_TIM_PWM_PulseFinishedCallback>
 8001ede:	e7bd      	b.n	8001e5c <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ee0:	f06f 0201 	mvn.w	r2, #1
 8001ee4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ee6:	4620      	mov	r0, r4
 8001ee8:	f000 feac 	bl	8002c44 <HAL_TIM_PeriodElapsedCallback>
 8001eec:	e7c1      	b.n	8001e72 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001eee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ef2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001ef4:	4620      	mov	r0, r4
 8001ef6:	f000 f9e5 	bl	80022c4 <HAL_TIMEx_BreakCallback>
 8001efa:	e7c3      	b.n	8001e84 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001efc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f00:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001f02:	4620      	mov	r0, r4
 8001f04:	f7ff ff4a 	bl	8001d9c <HAL_TIM_TriggerCallback>
 8001f08:	e7c5      	b.n	8001e96 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f0a:	f06f 0220 	mvn.w	r2, #32
 8001f0e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8001f10:	4620      	mov	r0, r4
 8001f12:	f000 f9d6 	bl	80022c2 <HAL_TIMEx_CommutCallback>
}
 8001f16:	e7c7      	b.n	8001ea8 <HAL_TIM_IRQHandler+0x10a>

08001f18 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8001f18:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f1a:	4a1b      	ldr	r2, [pc, #108]	; (8001f88 <TIM_Base_SetConfig+0x70>)
 8001f1c:	4290      	cmp	r0, r2
 8001f1e:	d00a      	beq.n	8001f36 <TIM_Base_SetConfig+0x1e>
 8001f20:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001f24:	d007      	beq.n	8001f36 <TIM_Base_SetConfig+0x1e>
 8001f26:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001f2a:	4290      	cmp	r0, r2
 8001f2c:	d003      	beq.n	8001f36 <TIM_Base_SetConfig+0x1e>
 8001f2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f32:	4290      	cmp	r0, r2
 8001f34:	d103      	bne.n	8001f3e <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001f3a:	684a      	ldr	r2, [r1, #4]
 8001f3c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f3e:	4a12      	ldr	r2, [pc, #72]	; (8001f88 <TIM_Base_SetConfig+0x70>)
 8001f40:	4290      	cmp	r0, r2
 8001f42:	d00a      	beq.n	8001f5a <TIM_Base_SetConfig+0x42>
 8001f44:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001f48:	d007      	beq.n	8001f5a <TIM_Base_SetConfig+0x42>
 8001f4a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001f4e:	4290      	cmp	r0, r2
 8001f50:	d003      	beq.n	8001f5a <TIM_Base_SetConfig+0x42>
 8001f52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f56:	4290      	cmp	r0, r2
 8001f58:	d103      	bne.n	8001f62 <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f5e:	68ca      	ldr	r2, [r1, #12]
 8001f60:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f66:	694a      	ldr	r2, [r1, #20]
 8001f68:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001f6a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f6c:	688b      	ldr	r3, [r1, #8]
 8001f6e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001f70:	680b      	ldr	r3, [r1, #0]
 8001f72:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f74:	4b04      	ldr	r3, [pc, #16]	; (8001f88 <TIM_Base_SetConfig+0x70>)
 8001f76:	4298      	cmp	r0, r3
 8001f78:	d002      	beq.n	8001f80 <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	6143      	str	r3, [r0, #20]
}
 8001f7e:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8001f80:	690b      	ldr	r3, [r1, #16]
 8001f82:	6303      	str	r3, [r0, #48]	; 0x30
 8001f84:	e7f9      	b.n	8001f7a <TIM_Base_SetConfig+0x62>
 8001f86:	bf00      	nop
 8001f88:	40012c00 	.word	0x40012c00

08001f8c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8001f8c:	b1a8      	cbz	r0, 8001fba <HAL_TIM_Base_Init+0x2e>
{
 8001f8e:	b510      	push	{r4, lr}
 8001f90:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001f92:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001f96:	b15b      	cbz	r3, 8001fb0 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f9e:	1d21      	adds	r1, r4, #4
 8001fa0:	6820      	ldr	r0, [r4, #0]
 8001fa2:	f7ff ffb9 	bl	8001f18 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001fac:	2000      	movs	r0, #0
}
 8001fae:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001fb0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001fb4:	f000 ffd8 	bl	8002f68 <HAL_TIM_Base_MspInit>
 8001fb8:	e7ee      	b.n	8001f98 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8001fba:	2001      	movs	r0, #1
}
 8001fbc:	4770      	bx	lr

08001fbe <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8001fbe:	b1a8      	cbz	r0, 8001fec <HAL_TIM_PWM_Init+0x2e>
{
 8001fc0:	b510      	push	{r4, lr}
 8001fc2:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001fc4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001fc8:	b15b      	cbz	r3, 8001fe2 <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fd0:	1d21      	adds	r1, r4, #4
 8001fd2:	6820      	ldr	r0, [r4, #0]
 8001fd4:	f7ff ffa0 	bl	8001f18 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001fde:	2000      	movs	r0, #0
}
 8001fe0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001fe2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001fe6:	f7ff fed5 	bl	8001d94 <HAL_TIM_PWM_MspInit>
 8001fea:	e7ee      	b.n	8001fca <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8001fec:	2001      	movs	r0, #1
}
 8001fee:	4770      	bx	lr

08001ff0 <TIM_OC2_SetConfig>:
{
 8001ff0:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ff2:	6a03      	ldr	r3, [r0, #32]
 8001ff4:	f023 0310 	bic.w	r3, r3, #16
 8001ff8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001ffa:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001ffc:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001ffe:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002000:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002004:	680d      	ldr	r5, [r1, #0]
 8002006:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800200a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800200e:	688d      	ldr	r5, [r1, #8]
 8002010:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002014:	4d0e      	ldr	r5, [pc, #56]	; (8002050 <TIM_OC2_SetConfig+0x60>)
 8002016:	42a8      	cmp	r0, r5
 8002018:	d009      	beq.n	800202e <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800201a:	4d0d      	ldr	r5, [pc, #52]	; (8002050 <TIM_OC2_SetConfig+0x60>)
 800201c:	42a8      	cmp	r0, r5
 800201e:	d00e      	beq.n	800203e <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 8002020:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002022:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002024:	684a      	ldr	r2, [r1, #4]
 8002026:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002028:	6203      	str	r3, [r0, #32]
}
 800202a:	bc30      	pop	{r4, r5}
 800202c:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 800202e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002032:	68cd      	ldr	r5, [r1, #12]
 8002034:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8002038:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800203c:	e7ed      	b.n	800201a <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800203e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002042:	694d      	ldr	r5, [r1, #20]
 8002044:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002048:	698d      	ldr	r5, [r1, #24]
 800204a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 800204e:	e7e7      	b.n	8002020 <TIM_OC2_SetConfig+0x30>
 8002050:	40012c00 	.word	0x40012c00

08002054 <HAL_TIM_PWM_ConfigChannel>:
{
 8002054:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002056:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800205a:	2b01      	cmp	r3, #1
 800205c:	d066      	beq.n	800212c <HAL_TIM_PWM_ConfigChannel+0xd8>
 800205e:	460d      	mov	r5, r1
 8002060:	4604      	mov	r4, r0
 8002062:	2301      	movs	r3, #1
 8002064:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002068:	2302      	movs	r3, #2
 800206a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 800206e:	2a0c      	cmp	r2, #12
 8002070:	d81a      	bhi.n	80020a8 <HAL_TIM_PWM_ConfigChannel+0x54>
 8002072:	e8df f002 	tbb	[pc, r2]
 8002076:	1907      	.short	0x1907
 8002078:	19201919 	.word	0x19201919
 800207c:	19341919 	.word	0x19341919
 8002080:	1919      	.short	0x1919
 8002082:	47          	.byte	0x47
 8002083:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002084:	6800      	ldr	r0, [r0, #0]
 8002086:	f7ff fdc3 	bl	8001c10 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800208a:	6822      	ldr	r2, [r4, #0]
 800208c:	6993      	ldr	r3, [r2, #24]
 800208e:	f043 0308 	orr.w	r3, r3, #8
 8002092:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002094:	6822      	ldr	r2, [r4, #0]
 8002096:	6993      	ldr	r3, [r2, #24]
 8002098:	f023 0304 	bic.w	r3, r3, #4
 800209c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800209e:	6822      	ldr	r2, [r4, #0]
 80020a0:	6993      	ldr	r3, [r2, #24]
 80020a2:	6929      	ldr	r1, [r5, #16]
 80020a4:	430b      	orrs	r3, r1
 80020a6:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 80020a8:	2301      	movs	r3, #1
 80020aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80020ae:	2000      	movs	r0, #0
 80020b0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80020b4:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80020b6:	6800      	ldr	r0, [r0, #0]
 80020b8:	f7ff ff9a 	bl	8001ff0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80020bc:	6822      	ldr	r2, [r4, #0]
 80020be:	6993      	ldr	r3, [r2, #24]
 80020c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020c4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80020c6:	6822      	ldr	r2, [r4, #0]
 80020c8:	6993      	ldr	r3, [r2, #24]
 80020ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80020ce:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80020d0:	6822      	ldr	r2, [r4, #0]
 80020d2:	6993      	ldr	r3, [r2, #24]
 80020d4:	6929      	ldr	r1, [r5, #16]
 80020d6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80020da:	6193      	str	r3, [r2, #24]
      break;
 80020dc:	e7e4      	b.n	80020a8 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80020de:	6800      	ldr	r0, [r0, #0]
 80020e0:	f7ff fdc4 	bl	8001c6c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80020e4:	6822      	ldr	r2, [r4, #0]
 80020e6:	69d3      	ldr	r3, [r2, #28]
 80020e8:	f043 0308 	orr.w	r3, r3, #8
 80020ec:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80020ee:	6822      	ldr	r2, [r4, #0]
 80020f0:	69d3      	ldr	r3, [r2, #28]
 80020f2:	f023 0304 	bic.w	r3, r3, #4
 80020f6:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80020f8:	6822      	ldr	r2, [r4, #0]
 80020fa:	69d3      	ldr	r3, [r2, #28]
 80020fc:	6929      	ldr	r1, [r5, #16]
 80020fe:	430b      	orrs	r3, r1
 8002100:	61d3      	str	r3, [r2, #28]
      break;
 8002102:	e7d1      	b.n	80020a8 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002104:	6800      	ldr	r0, [r0, #0]
 8002106:	f7ff fde3 	bl	8001cd0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800210a:	6822      	ldr	r2, [r4, #0]
 800210c:	69d3      	ldr	r3, [r2, #28]
 800210e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002112:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002114:	6822      	ldr	r2, [r4, #0]
 8002116:	69d3      	ldr	r3, [r2, #28]
 8002118:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800211c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800211e:	6822      	ldr	r2, [r4, #0]
 8002120:	69d3      	ldr	r3, [r2, #28]
 8002122:	6929      	ldr	r1, [r5, #16]
 8002124:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002128:	61d3      	str	r3, [r2, #28]
      break;
 800212a:	e7bd      	b.n	80020a8 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 800212c:	2002      	movs	r0, #2
 800212e:	e7c1      	b.n	80020b4 <HAL_TIM_PWM_ConfigChannel+0x60>

08002130 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002130:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002132:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002134:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002138:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800213c:	430b      	orrs	r3, r1
 800213e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002140:	6083      	str	r3, [r0, #8]
}
 8002142:	bc10      	pop	{r4}
 8002144:	4770      	bx	lr

08002146 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002146:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800214a:	2b01      	cmp	r3, #1
 800214c:	d066      	beq.n	800221c <HAL_TIM_ConfigClockSource+0xd6>
{
 800214e:	b510      	push	{r4, lr}
 8002150:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002152:	2301      	movs	r3, #1
 8002154:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002158:	2302      	movs	r3, #2
 800215a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800215e:	6802      	ldr	r2, [r0, #0]
 8002160:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002162:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002166:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800216a:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800216c:	680b      	ldr	r3, [r1, #0]
 800216e:	2b40      	cmp	r3, #64	; 0x40
 8002170:	d04a      	beq.n	8002208 <HAL_TIM_ConfigClockSource+0xc2>
 8002172:	d913      	bls.n	800219c <HAL_TIM_ConfigClockSource+0x56>
 8002174:	2b60      	cmp	r3, #96	; 0x60
 8002176:	d03d      	beq.n	80021f4 <HAL_TIM_ConfigClockSource+0xae>
 8002178:	d91e      	bls.n	80021b8 <HAL_TIM_ConfigClockSource+0x72>
 800217a:	2b70      	cmp	r3, #112	; 0x70
 800217c:	d028      	beq.n	80021d0 <HAL_TIM_ConfigClockSource+0x8a>
 800217e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002182:	d130      	bne.n	80021e6 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 8002184:	68cb      	ldr	r3, [r1, #12]
 8002186:	684a      	ldr	r2, [r1, #4]
 8002188:	6889      	ldr	r1, [r1, #8]
 800218a:	6800      	ldr	r0, [r0, #0]
 800218c:	f7ff ffd0 	bl	8002130 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002190:	6822      	ldr	r2, [r4, #0]
 8002192:	6893      	ldr	r3, [r2, #8]
 8002194:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002198:	6093      	str	r3, [r2, #8]
      break;
 800219a:	e024      	b.n	80021e6 <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 800219c:	2b10      	cmp	r3, #16
 800219e:	d006      	beq.n	80021ae <HAL_TIM_ConfigClockSource+0x68>
 80021a0:	d904      	bls.n	80021ac <HAL_TIM_ConfigClockSource+0x66>
 80021a2:	2b20      	cmp	r3, #32
 80021a4:	d003      	beq.n	80021ae <HAL_TIM_ConfigClockSource+0x68>
 80021a6:	2b30      	cmp	r3, #48	; 0x30
 80021a8:	d001      	beq.n	80021ae <HAL_TIM_ConfigClockSource+0x68>
 80021aa:	e01c      	b.n	80021e6 <HAL_TIM_ConfigClockSource+0xa0>
 80021ac:	b9db      	cbnz	r3, 80021e6 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80021ae:	4619      	mov	r1, r3
 80021b0:	6820      	ldr	r0, [r4, #0]
 80021b2:	f7ff fdd6 	bl	8001d62 <TIM_ITRx_SetConfig>
      break;
 80021b6:	e016      	b.n	80021e6 <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 80021b8:	2b50      	cmp	r3, #80	; 0x50
 80021ba:	d114      	bne.n	80021e6 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021bc:	68ca      	ldr	r2, [r1, #12]
 80021be:	6849      	ldr	r1, [r1, #4]
 80021c0:	6800      	ldr	r0, [r0, #0]
 80021c2:	f7ff fda9 	bl	8001d18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80021c6:	2150      	movs	r1, #80	; 0x50
 80021c8:	6820      	ldr	r0, [r4, #0]
 80021ca:	f7ff fdca 	bl	8001d62 <TIM_ITRx_SetConfig>
      break;
 80021ce:	e00a      	b.n	80021e6 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 80021d0:	68cb      	ldr	r3, [r1, #12]
 80021d2:	684a      	ldr	r2, [r1, #4]
 80021d4:	6889      	ldr	r1, [r1, #8]
 80021d6:	6800      	ldr	r0, [r0, #0]
 80021d8:	f7ff ffaa 	bl	8002130 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80021dc:	6822      	ldr	r2, [r4, #0]
 80021de:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80021e4:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80021e6:	2301      	movs	r3, #1
 80021e8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80021ec:	2000      	movs	r0, #0
 80021ee:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80021f2:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021f4:	68ca      	ldr	r2, [r1, #12]
 80021f6:	6849      	ldr	r1, [r1, #4]
 80021f8:	6800      	ldr	r0, [r0, #0]
 80021fa:	f7ff fd9f 	bl	8001d3c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80021fe:	2160      	movs	r1, #96	; 0x60
 8002200:	6820      	ldr	r0, [r4, #0]
 8002202:	f7ff fdae 	bl	8001d62 <TIM_ITRx_SetConfig>
      break;
 8002206:	e7ee      	b.n	80021e6 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002208:	68ca      	ldr	r2, [r1, #12]
 800220a:	6849      	ldr	r1, [r1, #4]
 800220c:	6800      	ldr	r0, [r0, #0]
 800220e:	f7ff fd83 	bl	8001d18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002212:	2140      	movs	r1, #64	; 0x40
 8002214:	6820      	ldr	r0, [r4, #0]
 8002216:	f7ff fda4 	bl	8001d62 <TIM_ITRx_SetConfig>
      break;
 800221a:	e7e4      	b.n	80021e6 <HAL_TIM_ConfigClockSource+0xa0>
  __HAL_LOCK(htim);
 800221c:	2002      	movs	r0, #2
}
 800221e:	4770      	bx	lr

08002220 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002220:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002222:	f001 011f 	and.w	r1, r1, #31
 8002226:	2301      	movs	r3, #1
 8002228:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800222c:	6a03      	ldr	r3, [r0, #32]
 800222e:	ea23 0304 	bic.w	r3, r3, r4
 8002232:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002234:	6a03      	ldr	r3, [r0, #32]
 8002236:	408a      	lsls	r2, r1
 8002238:	4313      	orrs	r3, r2
 800223a:	6203      	str	r3, [r0, #32]
}
 800223c:	bc10      	pop	{r4}
 800223e:	4770      	bx	lr

08002240 <HAL_TIM_PWM_Start>:
{
 8002240:	b510      	push	{r4, lr}
 8002242:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002244:	2201      	movs	r2, #1
 8002246:	6800      	ldr	r0, [r0, #0]
 8002248:	f7ff ffea 	bl	8002220 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800224c:	6823      	ldr	r3, [r4, #0]
 800224e:	4a0a      	ldr	r2, [pc, #40]	; (8002278 <HAL_TIM_PWM_Start+0x38>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d00b      	beq.n	800226c <HAL_TIM_PWM_Start+0x2c>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002254:	6822      	ldr	r2, [r4, #0]
 8002256:	6893      	ldr	r3, [r2, #8]
 8002258:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800225c:	2b06      	cmp	r3, #6
 800225e:	d003      	beq.n	8002268 <HAL_TIM_PWM_Start+0x28>
    __HAL_TIM_ENABLE(htim);
 8002260:	6813      	ldr	r3, [r2, #0]
 8002262:	f043 0301 	orr.w	r3, r3, #1
 8002266:	6013      	str	r3, [r2, #0]
}
 8002268:	2000      	movs	r0, #0
 800226a:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 800226c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800226e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002272:	645a      	str	r2, [r3, #68]	; 0x44
 8002274:	e7ee      	b.n	8002254 <HAL_TIM_PWM_Start+0x14>
 8002276:	bf00      	nop
 8002278:	40012c00 	.word	0x40012c00

0800227c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800227c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002280:	2b01      	cmp	r3, #1
 8002282:	d01c      	beq.n	80022be <HAL_TIMEx_MasterConfigSynchronization+0x42>
{
 8002284:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 8002286:	2601      	movs	r6, #1
 8002288:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800228c:	2302      	movs	r3, #2
 800228e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002292:	6802      	ldr	r2, [r0, #0]
 8002294:	6855      	ldr	r5, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002296:	6893      	ldr	r3, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002298:	f025 0570 	bic.w	r5, r5, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800229c:	680c      	ldr	r4, [r1, #0]
 800229e:	432c      	orrs	r4, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80022a0:	f023 0580 	bic.w	r5, r3, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022a4:	684b      	ldr	r3, [r1, #4]
 80022a6:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022a8:	6054      	str	r4, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80022aa:	6802      	ldr	r2, [r0, #0]
 80022ac:	6093      	str	r3, [r2, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80022ae:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022b2:	2300      	movs	r3, #0
 80022b4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80022b8:	4618      	mov	r0, r3
}
 80022ba:	bc70      	pop	{r4, r5, r6}
 80022bc:	4770      	bx	lr
  __HAL_LOCK(htim);
 80022be:	2002      	movs	r0, #2
}
 80022c0:	4770      	bx	lr

080022c2 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022c2:	4770      	bx	lr

080022c4 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022c4:	4770      	bx	lr

080022c6 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80022c6:	6802      	ldr	r2, [r0, #0]
 80022c8:	68d3      	ldr	r3, [r2, #12]
 80022ca:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80022ce:	60d3      	str	r3, [r2, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80022d0:	2320      	movs	r3, #32
 80022d2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
}
 80022d6:	4770      	bx	lr

080022d8 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022d8:	6802      	ldr	r2, [r0, #0]
 80022da:	68d3      	ldr	r3, [r2, #12]
 80022dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80022e0:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022e2:	6802      	ldr	r2, [r0, #0]
 80022e4:	6953      	ldr	r3, [r2, #20]
 80022e6:	f023 0301 	bic.w	r3, r3, #1
 80022ea:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80022ec:	2320      	movs	r3, #32
 80022ee:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 80022f2:	4770      	bx	lr

080022f4 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80022f4:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b21      	cmp	r3, #33	; 0x21
 80022fc:	d12a      	bne.n	8002354 <UART_Transmit_IT+0x60>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80022fe:	6883      	ldr	r3, [r0, #8]
 8002300:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002304:	d016      	beq.n	8002334 <UART_Transmit_IT+0x40>
        huart->pTxBuffPtr += 1U;
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002306:	6a03      	ldr	r3, [r0, #32]
 8002308:	1c5a      	adds	r2, r3, #1
 800230a:	6202      	str	r2, [r0, #32]
 800230c:	781a      	ldrb	r2, [r3, #0]
 800230e:	6803      	ldr	r3, [r0, #0]
 8002310:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002312:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8002314:	3b01      	subs	r3, #1
 8002316:	b29b      	uxth	r3, r3
 8002318:	84c3      	strh	r3, [r0, #38]	; 0x26
 800231a:	b9eb      	cbnz	r3, 8002358 <UART_Transmit_IT+0x64>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800231c:	6802      	ldr	r2, [r0, #0]
 800231e:	68d3      	ldr	r3, [r2, #12]
 8002320:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002324:	60d3      	str	r3, [r2, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002326:	6802      	ldr	r2, [r0, #0]
 8002328:	68d3      	ldr	r3, [r2, #12]
 800232a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800232e:	60d3      	str	r3, [r2, #12]
    }
    return HAL_OK;
 8002330:	2000      	movs	r0, #0
 8002332:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002334:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	6802      	ldr	r2, [r0, #0]
 800233a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800233e:	6053      	str	r3, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002340:	6903      	ldr	r3, [r0, #16]
 8002342:	b91b      	cbnz	r3, 800234c <UART_Transmit_IT+0x58>
        huart->pTxBuffPtr += 2U;
 8002344:	6a03      	ldr	r3, [r0, #32]
 8002346:	3302      	adds	r3, #2
 8002348:	6203      	str	r3, [r0, #32]
 800234a:	e7e2      	b.n	8002312 <UART_Transmit_IT+0x1e>
        huart->pTxBuffPtr += 1U;
 800234c:	6a03      	ldr	r3, [r0, #32]
 800234e:	3301      	adds	r3, #1
 8002350:	6203      	str	r3, [r0, #32]
 8002352:	e7de      	b.n	8002312 <UART_Transmit_IT+0x1e>
  }
  else
  {
    return HAL_BUSY;
 8002354:	2002      	movs	r0, #2
 8002356:	4770      	bx	lr
    return HAL_OK;
 8002358:	2000      	movs	r0, #0
  }
}
 800235a:	4770      	bx	lr

0800235c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800235c:	b538      	push	{r3, r4, r5, lr}
 800235e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002360:	6802      	ldr	r2, [r0, #0]
 8002362:	6913      	ldr	r3, [r2, #16]
 8002364:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002368:	68c1      	ldr	r1, [r0, #12]
 800236a:	430b      	orrs	r3, r1
 800236c:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800236e:	6883      	ldr	r3, [r0, #8]
 8002370:	6902      	ldr	r2, [r0, #16]
 8002372:	4313      	orrs	r3, r2
 8002374:	6942      	ldr	r2, [r0, #20]
 8002376:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8002378:	6801      	ldr	r1, [r0, #0]
 800237a:	68cb      	ldr	r3, [r1, #12]
 800237c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002380:	f023 030c 	bic.w	r3, r3, #12
 8002384:	4313      	orrs	r3, r2
 8002386:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002388:	6802      	ldr	r2, [r0, #0]
 800238a:	6953      	ldr	r3, [r2, #20]
 800238c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002390:	6981      	ldr	r1, [r0, #24]
 8002392:	430b      	orrs	r3, r1
 8002394:	6153      	str	r3, [r2, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002396:	6802      	ldr	r2, [r0, #0]
 8002398:	4b21      	ldr	r3, [pc, #132]	; (8002420 <UART_SetConfig+0xc4>)
 800239a:	429a      	cmp	r2, r3
 800239c:	d01f      	beq.n	80023de <UART_SetConfig+0x82>
    pclk = HAL_RCC_GetPCLK2Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800239e:	f7ff fc17 	bl	8001bd0 <HAL_RCC_GetPCLK1Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80023a6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80023aa:	6863      	ldr	r3, [r4, #4]
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	fbb0 f0f3 	udiv	r0, r0, r3
 80023b2:	4d1c      	ldr	r5, [pc, #112]	; (8002424 <UART_SetConfig+0xc8>)
 80023b4:	fba5 3200 	umull	r3, r2, r5, r0
 80023b8:	0951      	lsrs	r1, r2, #5
 80023ba:	2264      	movs	r2, #100	; 0x64
 80023bc:	fb02 0211 	mls	r2, r2, r1, r0
 80023c0:	0113      	lsls	r3, r2, #4
 80023c2:	3332      	adds	r3, #50	; 0x32
 80023c4:	fba5 2303 	umull	r2, r3, r5, r3
 80023c8:	095b      	lsrs	r3, r3, #5
 80023ca:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023ce:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	6821      	ldr	r1, [r4, #0]
 80023d8:	4413      	add	r3, r2
 80023da:	608b      	str	r3, [r1, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 80023dc:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 80023de:	f7ff fc07 	bl	8001bf0 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80023e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80023ea:	6863      	ldr	r3, [r4, #4]
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	fbb0 f0f3 	udiv	r0, r0, r3
 80023f2:	4d0c      	ldr	r5, [pc, #48]	; (8002424 <UART_SetConfig+0xc8>)
 80023f4:	fba5 3200 	umull	r3, r2, r5, r0
 80023f8:	0951      	lsrs	r1, r2, #5
 80023fa:	2264      	movs	r2, #100	; 0x64
 80023fc:	fb02 0211 	mls	r2, r2, r1, r0
 8002400:	0113      	lsls	r3, r2, #4
 8002402:	3332      	adds	r3, #50	; 0x32
 8002404:	fba5 2303 	umull	r2, r3, r5, r3
 8002408:	095b      	lsrs	r3, r3, #5
 800240a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800240e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	6821      	ldr	r1, [r4, #0]
 8002418:	4413      	add	r3, r2
 800241a:	608b      	str	r3, [r1, #8]
 800241c:	e7de      	b.n	80023dc <UART_SetConfig+0x80>
 800241e:	bf00      	nop
 8002420:	40013800 	.word	0x40013800
 8002424:	51eb851f 	.word	0x51eb851f

08002428 <HAL_UART_Init>:
  if (huart == NULL)
 8002428:	b358      	cbz	r0, 8002482 <HAL_UART_Init+0x5a>
{
 800242a:	b510      	push	{r4, lr}
 800242c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800242e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002432:	b30b      	cbz	r3, 8002478 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002434:	2324      	movs	r3, #36	; 0x24
 8002436:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800243a:	6822      	ldr	r2, [r4, #0]
 800243c:	68d3      	ldr	r3, [r2, #12]
 800243e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002442:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002444:	4620      	mov	r0, r4
 8002446:	f7ff ff89 	bl	800235c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800244a:	6822      	ldr	r2, [r4, #0]
 800244c:	6913      	ldr	r3, [r2, #16]
 800244e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002452:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002454:	6822      	ldr	r2, [r4, #0]
 8002456:	6953      	ldr	r3, [r2, #20]
 8002458:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800245c:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800245e:	6822      	ldr	r2, [r4, #0]
 8002460:	68d3      	ldr	r3, [r2, #12]
 8002462:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002466:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002468:	2000      	movs	r0, #0
 800246a:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800246c:	2320      	movs	r3, #32
 800246e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002472:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8002476:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002478:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800247c:	f000 fdcc 	bl	8003018 <HAL_UART_MspInit>
 8002480:	e7d8      	b.n	8002434 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002482:	2001      	movs	r0, #1
}
 8002484:	4770      	bx	lr
	...

08002488 <HAL_UART_Receive_DMA>:
{
 8002488:	b530      	push	{r4, r5, lr}
 800248a:	b083      	sub	sp, #12
  if (huart->RxState == HAL_UART_STATE_READY)
 800248c:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
 8002490:	b2e4      	uxtb	r4, r4
 8002492:	2c20      	cmp	r4, #32
 8002494:	d13d      	bne.n	8002512 <HAL_UART_Receive_DMA+0x8a>
    if ((pData == NULL) || (Size == 0U))
 8002496:	2900      	cmp	r1, #0
 8002498:	d03e      	beq.n	8002518 <HAL_UART_Receive_DMA+0x90>
 800249a:	2a00      	cmp	r2, #0
 800249c:	d03e      	beq.n	800251c <HAL_UART_Receive_DMA+0x94>
    __HAL_LOCK(huart);
 800249e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d03c      	beq.n	8002520 <HAL_UART_Receive_DMA+0x98>
 80024a6:	4613      	mov	r3, r2
 80024a8:	460a      	mov	r2, r1
 80024aa:	4604      	mov	r4, r0
 80024ac:	2101      	movs	r1, #1
 80024ae:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->pRxBuffPtr = pData;
 80024b2:	6282      	str	r2, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 80024b4:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024b6:	2500      	movs	r5, #0
 80024b8:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80024ba:	2122      	movs	r1, #34	; 0x22
 80024bc:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80024c0:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80024c2:	4818      	ldr	r0, [pc, #96]	; (8002524 <HAL_UART_Receive_DMA+0x9c>)
 80024c4:	6288      	str	r0, [r1, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80024c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80024c8:	4817      	ldr	r0, [pc, #92]	; (8002528 <HAL_UART_Receive_DMA+0xa0>)
 80024ca:	62c8      	str	r0, [r1, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80024cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80024ce:	4817      	ldr	r0, [pc, #92]	; (800252c <HAL_UART_Receive_DMA+0xa4>)
 80024d0:	6308      	str	r0, [r1, #48]	; 0x30
    huart->hdmarx->XferAbortCallback = NULL;
 80024d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80024d4:	634d      	str	r5, [r1, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80024d6:	6821      	ldr	r1, [r4, #0]
 80024d8:	3104      	adds	r1, #4
 80024da:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80024dc:	f7fe fe46 	bl	800116c <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 80024e0:	9501      	str	r5, [sp, #4]
 80024e2:	6823      	ldr	r3, [r4, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	9201      	str	r2, [sp, #4]
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	9201      	str	r2, [sp, #4]
 80024ec:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(huart);
 80024ee:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80024f2:	68da      	ldr	r2, [r3, #12]
 80024f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024f8:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024fa:	6822      	ldr	r2, [r4, #0]
 80024fc:	6953      	ldr	r3, [r2, #20]
 80024fe:	f043 0301 	orr.w	r3, r3, #1
 8002502:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002504:	6822      	ldr	r2, [r4, #0]
 8002506:	6953      	ldr	r3, [r2, #20]
 8002508:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800250c:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 800250e:	4628      	mov	r0, r5
 8002510:	e000      	b.n	8002514 <HAL_UART_Receive_DMA+0x8c>
    return HAL_BUSY;
 8002512:	2002      	movs	r0, #2
}
 8002514:	b003      	add	sp, #12
 8002516:	bd30      	pop	{r4, r5, pc}
      return HAL_ERROR;
 8002518:	2001      	movs	r0, #1
 800251a:	e7fb      	b.n	8002514 <HAL_UART_Receive_DMA+0x8c>
 800251c:	2001      	movs	r0, #1
 800251e:	e7f9      	b.n	8002514 <HAL_UART_Receive_DMA+0x8c>
    __HAL_LOCK(huart);
 8002520:	2002      	movs	r0, #2
 8002522:	e7f7      	b.n	8002514 <HAL_UART_Receive_DMA+0x8c>
 8002524:	0800254d 	.word	0x0800254d
 8002528:	08002629 	.word	0x08002629
 800252c:	08002635 	.word	0x08002635

08002530 <HAL_UART_TxCpltCallback>:
}
 8002530:	4770      	bx	lr

08002532 <UART_EndTransmit_IT>:
{
 8002532:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002534:	6801      	ldr	r1, [r0, #0]
 8002536:	68cb      	ldr	r3, [r1, #12]
 8002538:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800253c:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 800253e:	2320      	movs	r3, #32
 8002540:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002544:	f7ff fff4 	bl	8002530 <HAL_UART_TxCpltCallback>
}
 8002548:	2000      	movs	r0, #0
 800254a:	bd08      	pop	{r3, pc}

0800254c <UART_DMAReceiveCplt>:
{
 800254c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800254e:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002550:	6802      	ldr	r2, [r0, #0]
 8002552:	6812      	ldr	r2, [r2, #0]
 8002554:	f012 0f20 	tst.w	r2, #32
 8002558:	d113      	bne.n	8002582 <UART_DMAReceiveCplt+0x36>
    huart->RxXferCount = 0U;
 800255a:	2200      	movs	r2, #0
 800255c:	85da      	strh	r2, [r3, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800255e:	6819      	ldr	r1, [r3, #0]
 8002560:	68ca      	ldr	r2, [r1, #12]
 8002562:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002566:	60ca      	str	r2, [r1, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002568:	6819      	ldr	r1, [r3, #0]
 800256a:	694a      	ldr	r2, [r1, #20]
 800256c:	f022 0201 	bic.w	r2, r2, #1
 8002570:	614a      	str	r2, [r1, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002572:	6819      	ldr	r1, [r3, #0]
 8002574:	694a      	ldr	r2, [r1, #20]
 8002576:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800257a:	614a      	str	r2, [r1, #20]
    huart->RxState = HAL_UART_STATE_READY;
 800257c:	2220      	movs	r2, #32
 800257e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8002582:	4618      	mov	r0, r3
 8002584:	f000 fac2 	bl	8002b0c <HAL_UART_RxCpltCallback>
}
 8002588:	bd08      	pop	{r3, pc}

0800258a <UART_Receive_IT>:
{
 800258a:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800258c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b22      	cmp	r3, #34	; 0x22
 8002594:	d145      	bne.n	8002622 <UART_Receive_IT+0x98>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002596:	6883      	ldr	r3, [r0, #8]
 8002598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800259c:	d00e      	beq.n	80025bc <UART_Receive_IT+0x32>
      if (huart->Init.Parity == UART_PARITY_NONE)
 800259e:	6903      	ldr	r3, [r0, #16]
 80025a0:	bb03      	cbnz	r3, 80025e4 <UART_Receive_IT+0x5a>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80025a2:	6803      	ldr	r3, [r0, #0]
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80025a8:	1c59      	adds	r1, r3, #1
 80025aa:	6281      	str	r1, [r0, #40]	; 0x28
 80025ac:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 80025ae:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80025b0:	3b01      	subs	r3, #1
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80025b6:	b1f3      	cbz	r3, 80025f6 <UART_Receive_IT+0x6c>
    return HAL_OK;
 80025b8:	2000      	movs	r0, #0
 80025ba:	e033      	b.n	8002624 <UART_Receive_IT+0x9a>
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80025bc:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 80025be:	6903      	ldr	r3, [r0, #16]
 80025c0:	b943      	cbnz	r3, 80025d4 <UART_Receive_IT+0x4a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80025c2:	6803      	ldr	r3, [r0, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025ca:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 80025cc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80025ce:	3302      	adds	r3, #2
 80025d0:	6283      	str	r3, [r0, #40]	; 0x28
 80025d2:	e7ec      	b.n	80025ae <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80025d4:	6803      	ldr	r3, [r0, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 80025dc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80025de:	3301      	adds	r3, #1
 80025e0:	6283      	str	r3, [r0, #40]	; 0x28
 80025e2:	e7e4      	b.n	80025ae <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80025e4:	6803      	ldr	r3, [r0, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80025ea:	1c51      	adds	r1, r2, #1
 80025ec:	6281      	str	r1, [r0, #40]	; 0x28
 80025ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025f2:	7013      	strb	r3, [r2, #0]
 80025f4:	e7db      	b.n	80025ae <UART_Receive_IT+0x24>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80025f6:	6802      	ldr	r2, [r0, #0]
 80025f8:	68d3      	ldr	r3, [r2, #12]
 80025fa:	f023 0320 	bic.w	r3, r3, #32
 80025fe:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002600:	6802      	ldr	r2, [r0, #0]
 8002602:	68d3      	ldr	r3, [r2, #12]
 8002604:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002608:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800260a:	6802      	ldr	r2, [r0, #0]
 800260c:	6953      	ldr	r3, [r2, #20]
 800260e:	f023 0301 	bic.w	r3, r3, #1
 8002612:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002614:	2320      	movs	r3, #32
 8002616:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 800261a:	f000 fa77 	bl	8002b0c <HAL_UART_RxCpltCallback>
      return HAL_OK;
 800261e:	2000      	movs	r0, #0
 8002620:	e000      	b.n	8002624 <UART_Receive_IT+0x9a>
    return HAL_BUSY;
 8002622:	2002      	movs	r0, #2
}
 8002624:	bd08      	pop	{r3, pc}

08002626 <HAL_UART_RxHalfCpltCallback>:
}
 8002626:	4770      	bx	lr

08002628 <UART_DMARxHalfCplt>:
{
 8002628:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 800262a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800262c:	f7ff fffb 	bl	8002626 <HAL_UART_RxHalfCpltCallback>
}
 8002630:	bd08      	pop	{r3, pc}

08002632 <HAL_UART_ErrorCallback>:
}
 8002632:	4770      	bx	lr

08002634 <UART_DMAError>:
{
 8002634:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002636:	6a44      	ldr	r4, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002638:	6823      	ldr	r3, [r4, #0]
 800263a:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800263c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b21      	cmp	r3, #33	; 0x21
 8002644:	d010      	beq.n	8002668 <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002646:	6823      	ldr	r3, [r4, #0]
 8002648:	695a      	ldr	r2, [r3, #20]
 800264a:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800264e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b22      	cmp	r3, #34	; 0x22
 8002656:	d011      	beq.n	800267c <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002658:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800265a:	f043 0310 	orr.w	r3, r3, #16
 800265e:	63e3      	str	r3, [r4, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8002660:	4620      	mov	r0, r4
 8002662:	f7ff ffe6 	bl	8002632 <HAL_UART_ErrorCallback>
}
 8002666:	bd10      	pop	{r4, pc}
 8002668:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800266c:	2a00      	cmp	r2, #0
 800266e:	d0ea      	beq.n	8002646 <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 8002670:	2300      	movs	r3, #0
 8002672:	84e3      	strh	r3, [r4, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002674:	4620      	mov	r0, r4
 8002676:	f7ff fe26 	bl	80022c6 <UART_EndTxTransfer>
 800267a:	e7e4      	b.n	8002646 <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800267c:	2a00      	cmp	r2, #0
 800267e:	d0eb      	beq.n	8002658 <UART_DMAError+0x24>
    huart->RxXferCount = 0x00U;
 8002680:	2300      	movs	r3, #0
 8002682:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002684:	4620      	mov	r0, r4
 8002686:	f7ff fe27 	bl	80022d8 <UART_EndRxTransfer>
 800268a:	e7e5      	b.n	8002658 <UART_DMAError+0x24>

0800268c <HAL_UART_IRQHandler>:
{
 800268c:	b510      	push	{r4, lr}
 800268e:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002690:	6802      	ldr	r2, [r0, #0]
 8002692:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002694:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002696:	6952      	ldr	r2, [r2, #20]
  if (errorflags == RESET)
 8002698:	f013 000f 	ands.w	r0, r3, #15
 800269c:	d105      	bne.n	80026aa <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800269e:	f013 0f20 	tst.w	r3, #32
 80026a2:	d002      	beq.n	80026aa <HAL_UART_IRQHandler+0x1e>
 80026a4:	f011 0f20 	tst.w	r1, #32
 80026a8:	d153      	bne.n	8002752 <HAL_UART_IRQHandler+0xc6>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80026aa:	2800      	cmp	r0, #0
 80026ac:	d067      	beq.n	800277e <HAL_UART_IRQHandler+0xf2>
 80026ae:	f012 0201 	ands.w	r2, r2, #1
 80026b2:	d102      	bne.n	80026ba <HAL_UART_IRQHandler+0x2e>
 80026b4:	f411 7f90 	tst.w	r1, #288	; 0x120
 80026b8:	d061      	beq.n	800277e <HAL_UART_IRQHandler+0xf2>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80026ba:	f013 0f01 	tst.w	r3, #1
 80026be:	d006      	beq.n	80026ce <HAL_UART_IRQHandler+0x42>
 80026c0:	f411 7f80 	tst.w	r1, #256	; 0x100
 80026c4:	d003      	beq.n	80026ce <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026c6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80026c8:	f040 0001 	orr.w	r0, r0, #1
 80026cc:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026ce:	f013 0f04 	tst.w	r3, #4
 80026d2:	d004      	beq.n	80026de <HAL_UART_IRQHandler+0x52>
 80026d4:	b11a      	cbz	r2, 80026de <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026d6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80026d8:	f040 0002 	orr.w	r0, r0, #2
 80026dc:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026de:	f013 0f02 	tst.w	r3, #2
 80026e2:	d004      	beq.n	80026ee <HAL_UART_IRQHandler+0x62>
 80026e4:	b11a      	cbz	r2, 80026ee <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026e6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80026e8:	f040 0004 	orr.w	r0, r0, #4
 80026ec:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026ee:	f013 0f08 	tst.w	r3, #8
 80026f2:	d004      	beq.n	80026fe <HAL_UART_IRQHandler+0x72>
 80026f4:	b11a      	cbz	r2, 80026fe <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80026f6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80026f8:	f042 0208 	orr.w	r2, r2, #8
 80026fc:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80026fe:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002700:	2a00      	cmp	r2, #0
 8002702:	d048      	beq.n	8002796 <HAL_UART_IRQHandler+0x10a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002704:	f013 0f20 	tst.w	r3, #32
 8002708:	d002      	beq.n	8002710 <HAL_UART_IRQHandler+0x84>
 800270a:	f011 0f20 	tst.w	r1, #32
 800270e:	d124      	bne.n	800275a <HAL_UART_IRQHandler+0xce>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002710:	6823      	ldr	r3, [r4, #0]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002718:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800271a:	f012 0f08 	tst.w	r2, #8
 800271e:	d100      	bne.n	8002722 <HAL_UART_IRQHandler+0x96>
 8002720:	b33b      	cbz	r3, 8002772 <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 8002722:	4620      	mov	r0, r4
 8002724:	f7ff fdd8 	bl	80022d8 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002728:	6823      	ldr	r3, [r4, #0]
 800272a:	695a      	ldr	r2, [r3, #20]
 800272c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002730:	d01b      	beq.n	800276a <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002732:	695a      	ldr	r2, [r3, #20]
 8002734:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002738:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800273a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800273c:	b18b      	cbz	r3, 8002762 <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800273e:	4a1a      	ldr	r2, [pc, #104]	; (80027a8 <HAL_UART_IRQHandler+0x11c>)
 8002740:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002742:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002744:	f7fe fd4c 	bl	80011e0 <HAL_DMA_Abort_IT>
 8002748:	b328      	cbz	r0, 8002796 <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800274a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800274c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800274e:	4798      	blx	r3
 8002750:	e021      	b.n	8002796 <HAL_UART_IRQHandler+0x10a>
      UART_Receive_IT(huart);
 8002752:	4620      	mov	r0, r4
 8002754:	f7ff ff19 	bl	800258a <UART_Receive_IT>
      return;
 8002758:	e01d      	b.n	8002796 <HAL_UART_IRQHandler+0x10a>
        UART_Receive_IT(huart);
 800275a:	4620      	mov	r0, r4
 800275c:	f7ff ff15 	bl	800258a <UART_Receive_IT>
 8002760:	e7d6      	b.n	8002710 <HAL_UART_IRQHandler+0x84>
            HAL_UART_ErrorCallback(huart);
 8002762:	4620      	mov	r0, r4
 8002764:	f7ff ff65 	bl	8002632 <HAL_UART_ErrorCallback>
 8002768:	e015      	b.n	8002796 <HAL_UART_IRQHandler+0x10a>
          HAL_UART_ErrorCallback(huart);
 800276a:	4620      	mov	r0, r4
 800276c:	f7ff ff61 	bl	8002632 <HAL_UART_ErrorCallback>
 8002770:	e011      	b.n	8002796 <HAL_UART_IRQHandler+0x10a>
        HAL_UART_ErrorCallback(huart);
 8002772:	4620      	mov	r0, r4
 8002774:	f7ff ff5d 	bl	8002632 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002778:	2300      	movs	r3, #0
 800277a:	63e3      	str	r3, [r4, #60]	; 0x3c
 800277c:	e00b      	b.n	8002796 <HAL_UART_IRQHandler+0x10a>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800277e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002782:	d002      	beq.n	800278a <HAL_UART_IRQHandler+0xfe>
 8002784:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002788:	d106      	bne.n	8002798 <HAL_UART_IRQHandler+0x10c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800278a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800278e:	d002      	beq.n	8002796 <HAL_UART_IRQHandler+0x10a>
 8002790:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002794:	d104      	bne.n	80027a0 <HAL_UART_IRQHandler+0x114>
}
 8002796:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 8002798:	4620      	mov	r0, r4
 800279a:	f7ff fdab 	bl	80022f4 <UART_Transmit_IT>
    return;
 800279e:	e7fa      	b.n	8002796 <HAL_UART_IRQHandler+0x10a>
    UART_EndTransmit_IT(huart);
 80027a0:	4620      	mov	r0, r4
 80027a2:	f7ff fec6 	bl	8002532 <UART_EndTransmit_IT>
    return;
 80027a6:	e7f6      	b.n	8002796 <HAL_UART_IRQHandler+0x10a>
 80027a8:	080027ad 	.word	0x080027ad

080027ac <UART_DMAAbortOnError>:
{
 80027ac:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027ae:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80027b4:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80027b6:	f7ff ff3c 	bl	8002632 <HAL_UART_ErrorCallback>
}
 80027ba:	bd08      	pop	{r3, pc}

080027bc <PID_PROCESS>:
	pid_parameters->Kp = Kp;
	pid_parameters->Ki = Ki;
	pid_parameters->Kd = Kd;
}
float PID_PROCESS(PID_parameter* pid_parameter, float vitri,float setpoint)   //setpoint = 0;
{
 80027bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027c0:	b083      	sub	sp, #12
 80027c2:	4604      	mov	r4, r0
 80027c4:	4608      	mov	r0, r1
		pid_parameter->error =  vitri - setpoint;
 80027c6:	4611      	mov	r1, r2
 80027c8:	f7fe f8e2 	bl	8000990 <__aeabi_fsub>
 80027cc:	4605      	mov	r5, r0
 80027ce:	60e0      	str	r0, [r4, #12]
    pid_parameter->pre2_error = pid_parameter->pre_error;
 80027d0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80027d4:	f8c4 a014 	str.w	sl, [r4, #20]
    pid_parameter->pre_error = pid_parameter->error;
 80027d8:	6120      	str	r0, [r4, #16]
    
    pid_parameter->pre_Out = pid_parameter->Out;
 80027da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80027dc:	62e6      	str	r6, [r4, #44]	; 0x2c

    pid_parameter->KP_part = pid_parameter->Kp * (pid_parameter->error - pid_parameter->pre_error);
 80027de:	6827      	ldr	r7, [r4, #0]
 80027e0:	4601      	mov	r1, r0
 80027e2:	f7fe f8d5 	bl	8000990 <__aeabi_fsub>
 80027e6:	4601      	mov	r1, r0
 80027e8:	4638      	mov	r0, r7
 80027ea:	f7fe f9db 	bl	8000ba4 <__aeabi_fmul>
 80027ee:	4607      	mov	r7, r0
 80027f0:	61e0      	str	r0, [r4, #28]
    pid_parameter->KI_part = 0.5* pid_parameter->Ki * pid_parameter->Ts * (pid_parameter->error + pid_parameter->pre_error);
 80027f2:	6860      	ldr	r0, [r4, #4]
 80027f4:	f7fd fe0e 	bl	8000414 <__aeabi_f2d>
 80027f8:	2200      	movs	r2, #0
 80027fa:	4b2b      	ldr	r3, [pc, #172]	; (80028a8 <PID_PROCESS+0xec>)
 80027fc:	f7fd fe62 	bl	80004c4 <__aeabi_dmul>
 8002800:	4680      	mov	r8, r0
 8002802:	4689      	mov	r9, r1
 8002804:	f8d4 b018 	ldr.w	fp, [r4, #24]
 8002808:	4658      	mov	r0, fp
 800280a:	f7fd fe03 	bl	8000414 <__aeabi_f2d>
 800280e:	4602      	mov	r2, r0
 8002810:	460b      	mov	r3, r1
 8002812:	4640      	mov	r0, r8
 8002814:	4649      	mov	r1, r9
 8002816:	f7fd fe55 	bl	80004c4 <__aeabi_dmul>
 800281a:	4680      	mov	r8, r0
 800281c:	4689      	mov	r9, r1
 800281e:	4629      	mov	r1, r5
 8002820:	4628      	mov	r0, r5
 8002822:	f7fe f8b7 	bl	8000994 <__addsf3>
 8002826:	9001      	str	r0, [sp, #4]
 8002828:	f7fd fdf4 	bl	8000414 <__aeabi_f2d>
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	4640      	mov	r0, r8
 8002832:	4649      	mov	r1, r9
 8002834:	f7fd fe46 	bl	80004c4 <__aeabi_dmul>
 8002838:	f7fe f856 	bl	80008e8 <__aeabi_d2f>
 800283c:	4680      	mov	r8, r0
 800283e:	6220      	str	r0, [r4, #32]
    pid_parameter->KD_part =(pid_parameter->Kd / pid_parameter->Ts) * (pid_parameter->error - 2*pid_parameter->pre_error +pid_parameter->pre2_error);
 8002840:	4659      	mov	r1, fp
 8002842:	68a0      	ldr	r0, [r4, #8]
 8002844:	f7fe fa62 	bl	8000d0c <__aeabi_fdiv>
 8002848:	4681      	mov	r9, r0
 800284a:	9901      	ldr	r1, [sp, #4]
 800284c:	4628      	mov	r0, r5
 800284e:	f7fe f89f 	bl	8000990 <__aeabi_fsub>
 8002852:	4601      	mov	r1, r0
 8002854:	4650      	mov	r0, sl
 8002856:	f7fe f89d 	bl	8000994 <__addsf3>
 800285a:	4601      	mov	r1, r0
 800285c:	4648      	mov	r0, r9
 800285e:	f7fe f9a1 	bl	8000ba4 <__aeabi_fmul>
 8002862:	4605      	mov	r5, r0
 8002864:	6260      	str	r0, [r4, #36]	; 0x24

    pid_parameter->Out = pid_parameter->pre_Out+ pid_parameter->KP_part + pid_parameter->KI_part +pid_parameter->KD_part;
 8002866:	4639      	mov	r1, r7
 8002868:	4630      	mov	r0, r6
 800286a:	f7fe f893 	bl	8000994 <__addsf3>
 800286e:	4601      	mov	r1, r0
 8002870:	4640      	mov	r0, r8
 8002872:	f7fe f88f 	bl	8000994 <__addsf3>
 8002876:	4601      	mov	r1, r0
 8002878:	4628      	mov	r0, r5
 800287a:	f7fe f88b 	bl	8000994 <__addsf3>
 800287e:	4606      	mov	r6, r0
 8002880:	62a0      	str	r0, [r4, #40]	; 0x28
    
    if (pid_parameter->Out > pid_parameter->PID_Saturation)
 8002882:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8002884:	4629      	mov	r1, r5
 8002886:	f7fe fb49 	bl	8000f1c <__aeabi_fcmpgt>
 800288a:	b940      	cbnz	r0, 800289e <PID_PROCESS+0xe2>
	  {
			pid_parameter->Out = pid_parameter->PID_Saturation;
	   }
	  else if (pid_parameter->Out < (-pid_parameter->PID_Saturation))
 800288c:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8002890:	4629      	mov	r1, r5
 8002892:	4630      	mov	r0, r6
 8002894:	f7fe fb24 	bl	8000ee0 <__aeabi_fcmplt>
 8002898:	b110      	cbz	r0, 80028a0 <PID_PROCESS+0xe4>
	  {
			pid_parameter->Out = -pid_parameter->PID_Saturation;
 800289a:	62a5      	str	r5, [r4, #40]	; 0x28
 800289c:	e000      	b.n	80028a0 <PID_PROCESS+0xe4>
			pid_parameter->Out = pid_parameter->PID_Saturation;
 800289e:	62a5      	str	r5, [r4, #40]	; 0x28
	  }
		
    return pid_parameter->Out; 
 80028a0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80028a2:	b003      	add	sp, #12
 80028a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028a8:	3fe00000 	.word	0x3fe00000

080028ac <forward>:
/**
  * @brief function control
  * @param None
  */
void forward(void)
	{
 80028ac:	b510      	push	{r4, lr}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);  // dong co trai
 80028ae:	4c0c      	ldr	r4, [pc, #48]	; (80028e0 <forward+0x34>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	2102      	movs	r1, #2
 80028b4:	4620      	mov	r0, r4
 80028b6:	f7fe fe74 	bl	80015a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
 80028ba:	2201      	movs	r2, #1
 80028bc:	4611      	mov	r1, r2
 80028be:	4620      	mov	r0, r4
 80028c0:	f7fe fe6f 	bl	80015a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET); // dong co phai
 80028c4:	2201      	movs	r2, #1
 80028c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028ca:	4620      	mov	r0, r4
 80028cc:	f7fe fe69 	bl	80015a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,GPIO_PIN_RESET);
 80028d0:	2200      	movs	r2, #0
 80028d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028d6:	4620      	mov	r0, r4
 80028d8:	f7fe fe63 	bl	80015a2 <HAL_GPIO_WritePin>
	}
 80028dc:	bd10      	pop	{r4, pc}
 80028de:	bf00      	nop
 80028e0:	40010c00 	.word	0x40010c00

080028e4 <backward>:
void backward(void)
	{
 80028e4:	b510      	push	{r4, lr}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_SET);
 80028e6:	4c0c      	ldr	r4, [pc, #48]	; (8002918 <backward+0x34>)
 80028e8:	2201      	movs	r2, #1
 80028ea:	2102      	movs	r1, #2
 80028ec:	4620      	mov	r0, r4
 80028ee:	f7fe fe58 	bl	80015a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 80028f2:	2200      	movs	r2, #0
 80028f4:	2101      	movs	r1, #1
 80028f6:	4620      	mov	r0, r4
 80028f8:	f7fe fe53 	bl	80015a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_RESET);
 80028fc:	2200      	movs	r2, #0
 80028fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002902:	4620      	mov	r0, r4
 8002904:	f7fe fe4d 	bl	80015a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,GPIO_PIN_SET);
 8002908:	2201      	movs	r2, #1
 800290a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800290e:	4620      	mov	r0, r4
 8002910:	f7fe fe47 	bl	80015a2 <HAL_GPIO_WritePin>
	}
 8002914:	bd10      	pop	{r4, pc}
 8002916:	bf00      	nop
 8002918:	40010c00 	.word	0x40010c00

0800291c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800291c:	b530      	push	{r4, r5, lr}
 800291e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002920:	2400      	movs	r4, #0
 8002922:	9404      	str	r4, [sp, #16]
 8002924:	9405      	str	r4, [sp, #20]
 8002926:	9406      	str	r4, [sp, #24]
 8002928:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800292a:	4b21      	ldr	r3, [pc, #132]	; (80029b0 <MX_GPIO_Init+0x94>)
 800292c:	699a      	ldr	r2, [r3, #24]
 800292e:	f042 0220 	orr.w	r2, r2, #32
 8002932:	619a      	str	r2, [r3, #24]
 8002934:	699a      	ldr	r2, [r3, #24]
 8002936:	f002 0220 	and.w	r2, r2, #32
 800293a:	9201      	str	r2, [sp, #4]
 800293c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800293e:	699a      	ldr	r2, [r3, #24]
 8002940:	f042 0208 	orr.w	r2, r2, #8
 8002944:	619a      	str	r2, [r3, #24]
 8002946:	699a      	ldr	r2, [r3, #24]
 8002948:	f002 0208 	and.w	r2, r2, #8
 800294c:	9202      	str	r2, [sp, #8]
 800294e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002950:	699a      	ldr	r2, [r3, #24]
 8002952:	f042 0204 	orr.w	r2, r2, #4
 8002956:	619a      	str	r2, [r3, #24]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	f003 0304 	and.w	r3, r3, #4
 800295e:	9303      	str	r3, [sp, #12]
 8002960:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8002962:	4d14      	ldr	r5, [pc, #80]	; (80029b4 <MX_GPIO_Init+0x98>)
 8002964:	4622      	mov	r2, r4
 8002966:	f640 4103 	movw	r1, #3075	; 0xc03
 800296a:	4628      	mov	r0, r5
 800296c:	f7fe fe19 	bl	80015a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 8002970:	f640 4303 	movw	r3, #3075	; 0xc03
 8002974:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002976:	2301      	movs	r3, #1
 8002978:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800297c:	2302      	movs	r3, #2
 800297e:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002980:	a904      	add	r1, sp, #16
 8002982:	4628      	mov	r0, r5
 8002984:	f7fe fd1a 	bl	80013bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002988:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800298c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800298e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002990:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002992:	a904      	add	r1, sp, #16
 8002994:	4808      	ldr	r0, [pc, #32]	; (80029b8 <MX_GPIO_Init+0x9c>)
 8002996:	f7fe fd11 	bl	80013bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800299a:	2338      	movs	r3, #56	; 0x38
 800299c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800299e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a0:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029a2:	a904      	add	r1, sp, #16
 80029a4:	4628      	mov	r0, r5
 80029a6:	f7fe fd09 	bl	80013bc <HAL_GPIO_Init>

}
 80029aa:	b009      	add	sp, #36	; 0x24
 80029ac:	bd30      	pop	{r4, r5, pc}
 80029ae:	bf00      	nop
 80029b0:	40021000 	.word	0x40021000
 80029b4:	40010c00 	.word	0x40010c00
 80029b8:	40010800 	.word	0x40010800

080029bc <MX_TIM3_Init>:
{
 80029bc:	b530      	push	{r4, r5, lr}
 80029be:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029c0:	2400      	movs	r4, #0
 80029c2:	9402      	str	r4, [sp, #8]
 80029c4:	9403      	str	r4, [sp, #12]
 80029c6:	9404      	str	r4, [sp, #16]
 80029c8:	9405      	str	r4, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029ca:	9400      	str	r4, [sp, #0]
 80029cc:	9401      	str	r4, [sp, #4]
  htim3.Instance = TIM3;
 80029ce:	4d0e      	ldr	r5, [pc, #56]	; (8002a08 <MX_TIM3_Init+0x4c>)
 80029d0:	4b0e      	ldr	r3, [pc, #56]	; (8002a0c <MX_TIM3_Init+0x50>)
 80029d2:	602b      	str	r3, [r5, #0]
  htim3.Init.Prescaler = 7199;
 80029d4:	f641 431f 	movw	r3, #7199	; 0x1c1f
 80029d8:	606b      	str	r3, [r5, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029da:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 199;
 80029dc:	23c7      	movs	r3, #199	; 0xc7
 80029de:	60eb      	str	r3, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029e0:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029e2:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80029e4:	4628      	mov	r0, r5
 80029e6:	f7ff fad1 	bl	8001f8c <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029ee:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80029f0:	a902      	add	r1, sp, #8
 80029f2:	4628      	mov	r0, r5
 80029f4:	f7ff fba7 	bl	8002146 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029f8:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029fa:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029fc:	4669      	mov	r1, sp
 80029fe:	4628      	mov	r0, r5
 8002a00:	f7ff fc3c 	bl	800227c <HAL_TIMEx_MasterConfigSynchronization>
}
 8002a04:	b007      	add	sp, #28
 8002a06:	bd30      	pop	{r4, r5, pc}
 8002a08:	200000d8 	.word	0x200000d8
 8002a0c:	40000400 	.word	0x40000400

08002a10 <MX_TIM4_Init>:
{
 8002a10:	b530      	push	{r4, r5, lr}
 8002a12:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a14:	2400      	movs	r4, #0
 8002a16:	940a      	str	r4, [sp, #40]	; 0x28
 8002a18:	940b      	str	r4, [sp, #44]	; 0x2c
 8002a1a:	940c      	str	r4, [sp, #48]	; 0x30
 8002a1c:	940d      	str	r4, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a1e:	9408      	str	r4, [sp, #32]
 8002a20:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a22:	9401      	str	r4, [sp, #4]
 8002a24:	9402      	str	r4, [sp, #8]
 8002a26:	9403      	str	r4, [sp, #12]
 8002a28:	9404      	str	r4, [sp, #16]
 8002a2a:	9405      	str	r4, [sp, #20]
 8002a2c:	9406      	str	r4, [sp, #24]
 8002a2e:	9407      	str	r4, [sp, #28]
  htim4.Instance = TIM4;
 8002a30:	4d18      	ldr	r5, [pc, #96]	; (8002a94 <MX_TIM4_Init+0x84>)
 8002a32:	4b19      	ldr	r3, [pc, #100]	; (8002a98 <MX_TIM4_Init+0x88>)
 8002a34:	602b      	str	r3, [r5, #0]
  htim4.Init.Prescaler = 9;
 8002a36:	2309      	movs	r3, #9
 8002a38:	606b      	str	r3, [r5, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a3a:	60ac      	str	r4, [r5, #8]
  htim4.Init.Period = 254;
 8002a3c:	23fe      	movs	r3, #254	; 0xfe
 8002a3e:	60eb      	str	r3, [r5, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a40:	612c      	str	r4, [r5, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a42:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002a44:	4628      	mov	r0, r5
 8002a46:	f7ff faa1 	bl	8001f8c <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a4e:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002a50:	a90a      	add	r1, sp, #40	; 0x28
 8002a52:	4628      	mov	r0, r5
 8002a54:	f7ff fb77 	bl	8002146 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002a58:	4628      	mov	r0, r5
 8002a5a:	f7ff fab0 	bl	8001fbe <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a5e:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a60:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002a62:	a908      	add	r1, sp, #32
 8002a64:	4628      	mov	r0, r5
 8002a66:	f7ff fc09 	bl	800227c <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a6a:	2360      	movs	r3, #96	; 0x60
 8002a6c:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8002a6e:	9402      	str	r4, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a70:	9403      	str	r4, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a72:	9405      	str	r4, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002a74:	2208      	movs	r2, #8
 8002a76:	a901      	add	r1, sp, #4
 8002a78:	4628      	mov	r0, r5
 8002a7a:	f7ff faeb 	bl	8002054 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002a7e:	220c      	movs	r2, #12
 8002a80:	a901      	add	r1, sp, #4
 8002a82:	4628      	mov	r0, r5
 8002a84:	f7ff fae6 	bl	8002054 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim4);
 8002a88:	4628      	mov	r0, r5
 8002a8a:	f000 fa9d 	bl	8002fc8 <HAL_TIM_MspPostInit>
}
 8002a8e:	b00f      	add	sp, #60	; 0x3c
 8002a90:	bd30      	pop	{r4, r5, pc}
 8002a92:	bf00      	nop
 8002a94:	20000094 	.word	0x20000094
 8002a98:	40000800 	.word	0x40000800

08002a9c <MX_DMA_Init>:
{
 8002a9c:	b500      	push	{lr}
 8002a9e:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002aa0:	4b0e      	ldr	r3, [pc, #56]	; (8002adc <MX_DMA_Init+0x40>)
 8002aa2:	695a      	ldr	r2, [r3, #20]
 8002aa4:	f042 0201 	orr.w	r2, r2, #1
 8002aa8:	615a      	str	r2, [r3, #20]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	9301      	str	r3, [sp, #4]
 8002ab2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	4611      	mov	r1, r2
 8002ab8:	200e      	movs	r0, #14
 8002aba:	f7fe fab3 	bl	8001024 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002abe:	200e      	movs	r0, #14
 8002ac0:	f7fe fae4 	bl	800108c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	4611      	mov	r1, r2
 8002ac8:	200f      	movs	r0, #15
 8002aca:	f7fe faab 	bl	8001024 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002ace:	200f      	movs	r0, #15
 8002ad0:	f7fe fadc 	bl	800108c <HAL_NVIC_EnableIRQ>
}
 8002ad4:	b003      	add	sp, #12
 8002ad6:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ada:	bf00      	nop
 8002adc:	40021000 	.word	0x40021000

08002ae0 <MX_USART1_UART_Init>:
{
 8002ae0:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8002ae2:	4808      	ldr	r0, [pc, #32]	; (8002b04 <MX_USART1_UART_Init+0x24>)
 8002ae4:	4b08      	ldr	r3, [pc, #32]	; (8002b08 <MX_USART1_UART_Init+0x28>)
 8002ae6:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 8002ae8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002aec:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002aee:	2300      	movs	r3, #0
 8002af0:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002af2:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002af4:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002af6:	220c      	movs	r2, #12
 8002af8:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002afa:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002afc:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002afe:	f7ff fc93 	bl	8002428 <HAL_UART_Init>
}
 8002b02:	bd08      	pop	{r3, pc}
 8002b04:	200001a0 	.word	0x200001a0
 8002b08:	40013800 	.word	0x40013800

08002b0c <HAL_UART_RxCpltCallback>:
{	
 8002b0c:	b538      	push	{r3, r4, r5, lr}
	if(huart->Instance == huart1.Instance)
 8002b0e:	6802      	ldr	r2, [r0, #0]
 8002b10:	4b2d      	ldr	r3, [pc, #180]	; (8002bc8 <HAL_UART_RxCpltCallback+0xbc>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d000      	beq.n	8002b1a <HAL_UART_RxCpltCallback+0xe>
}
 8002b18:	bd38      	pop	{r3, r4, r5, pc}
	switch(my_state)
 8002b1a:	4b2c      	ldr	r3, [pc, #176]	; (8002bcc <HAL_UART_RxCpltCallback+0xc0>)
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	b30b      	cbz	r3, 8002b64 <HAL_UART_RxCpltCallback+0x58>
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d1f9      	bne.n	8002b18 <HAL_UART_RxCpltCallback+0xc>
			HAL_UART_Receive_DMA(&huart1,(uint8_t*)Rx_buff,1);		
 8002b24:	4c2a      	ldr	r4, [pc, #168]	; (8002bd0 <HAL_UART_RxCpltCallback+0xc4>)
 8002b26:	2201      	movs	r2, #1
 8002b28:	4621      	mov	r1, r4
 8002b2a:	4827      	ldr	r0, [pc, #156]	; (8002bc8 <HAL_UART_RxCpltCallback+0xbc>)
 8002b2c:	f7ff fcac 	bl	8002488 <HAL_UART_Receive_DMA>
			if (Rx_buff[0] == 'f' || Rx_buff[0] == 'b' || Rx_buff[0] == 'r'||Rx_buff[0] == 'l')  // khi o che do dieu khien tay
 8002b30:	7823      	ldrb	r3, [r4, #0]
 8002b32:	2b66      	cmp	r3, #102	; 0x66
 8002b34:	d030      	beq.n	8002b98 <HAL_UART_RxCpltCallback+0x8c>
 8002b36:	2b62      	cmp	r3, #98	; 0x62
 8002b38:	d02e      	beq.n	8002b98 <HAL_UART_RxCpltCallback+0x8c>
 8002b3a:	2b72      	cmp	r3, #114	; 0x72
 8002b3c:	d02c      	beq.n	8002b98 <HAL_UART_RxCpltCallback+0x8c>
 8002b3e:	2b6c      	cmp	r3, #108	; 0x6c
 8002b40:	d02a      	beq.n	8002b98 <HAL_UART_RxCpltCallback+0x8c>
			else if (Rx_buff[0] =='i')
 8002b42:	2b69      	cmp	r3, #105	; 0x69
 8002b44:	d032      	beq.n	8002bac <HAL_UART_RxCpltCallback+0xa0>
			else if (Rx_buff[0] == 'd' ) // bat che do do line
 8002b46:	2b64      	cmp	r3, #100	; 0x64
 8002b48:	d034      	beq.n	8002bb4 <HAL_UART_RxCpltCallback+0xa8>
			else if(Rx_buff[0] == 'k'  ) // tat che do do line
 8002b4a:	2b6b      	cmp	r3, #107	; 0x6b
 8002b4c:	d1e4      	bne.n	8002b18 <HAL_UART_RxCpltCallback+0xc>
					mode =0;  
 8002b4e:	4c1f      	ldr	r4, [pc, #124]	; (8002bcc <HAL_UART_RxCpltCallback+0xc0>)
 8002b50:	2300      	movs	r3, #0
 8002b52:	7223      	strb	r3, [r4, #8]
					HAL_UART_Receive_DMA(&huart1,Rx_buff,1);
 8002b54:	2201      	movs	r2, #1
 8002b56:	491e      	ldr	r1, [pc, #120]	; (8002bd0 <HAL_UART_RxCpltCallback+0xc4>)
 8002b58:	481b      	ldr	r0, [pc, #108]	; (8002bc8 <HAL_UART_RxCpltCallback+0xbc>)
 8002b5a:	f7ff fc95 	bl	8002488 <HAL_UART_Receive_DMA>
					my_state = UART_APP;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	7023      	strb	r3, [r4, #0]
}
 8002b62:	e7d9      	b.n	8002b18 <HAL_UART_RxCpltCallback+0xc>
			if (Rx_buff[0] == 's' )  // khi nhan nut start de bat dau
 8002b64:	4b1a      	ldr	r3, [pc, #104]	; (8002bd0 <HAL_UART_RxCpltCallback+0xc4>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b73      	cmp	r3, #115	; 0x73
 8002b6a:	d00a      	beq.n	8002b82 <HAL_UART_RxCpltCallback+0x76>
			else if (Rx_buff[0] == '1' )  // khi nhan nut stop
 8002b6c:	2b31      	cmp	r3, #49	; 0x31
 8002b6e:	d1d9      	bne.n	8002b24 <HAL_UART_RxCpltCallback+0x18>
					my_state = UART_START;
 8002b70:	4b16      	ldr	r3, [pc, #88]	; (8002bcc <HAL_UART_RxCpltCallback+0xc0>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_DMA(&huart1,Rx_buff,1);
 8002b76:	2201      	movs	r2, #1
 8002b78:	4915      	ldr	r1, [pc, #84]	; (8002bd0 <HAL_UART_RxCpltCallback+0xc4>)
 8002b7a:	4813      	ldr	r0, [pc, #76]	; (8002bc8 <HAL_UART_RxCpltCallback+0xbc>)
 8002b7c:	f7ff fc84 	bl	8002488 <HAL_UART_Receive_DMA>
					break;
 8002b80:	e7ca      	b.n	8002b18 <HAL_UART_RxCpltCallback+0xc>
					i++;
 8002b82:	4b12      	ldr	r3, [pc, #72]	; (8002bcc <HAL_UART_RxCpltCallback+0xc0>)
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	3201      	adds	r2, #1
 8002b88:	605a      	str	r2, [r3, #4]
					my_state = UART_APP;
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_DMA(&huart1,Rx_buff,1);
 8002b8e:	4910      	ldr	r1, [pc, #64]	; (8002bd0 <HAL_UART_RxCpltCallback+0xc4>)
 8002b90:	480d      	ldr	r0, [pc, #52]	; (8002bc8 <HAL_UART_RxCpltCallback+0xbc>)
 8002b92:	f7ff fc79 	bl	8002488 <HAL_UART_Receive_DMA>
					break;
 8002b96:	e7bf      	b.n	8002b18 <HAL_UART_RxCpltCallback+0xc>
				mode = 2;  // control
 8002b98:	4b0c      	ldr	r3, [pc, #48]	; (8002bcc <HAL_UART_RxCpltCallback+0xc0>)
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	721a      	strb	r2, [r3, #8]
				my_state = UART_APP;
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_DMA(&huart1,Rx_buff,1);
 8002ba2:	490b      	ldr	r1, [pc, #44]	; (8002bd0 <HAL_UART_RxCpltCallback+0xc4>)
 8002ba4:	4808      	ldr	r0, [pc, #32]	; (8002bc8 <HAL_UART_RxCpltCallback+0xbc>)
 8002ba6:	f7ff fc6f 	bl	8002488 <HAL_UART_Receive_DMA>
 8002baa:	e7b5      	b.n	8002b18 <HAL_UART_RxCpltCallback+0xc>
					mode = 3;
 8002bac:	4b07      	ldr	r3, [pc, #28]	; (8002bcc <HAL_UART_RxCpltCallback+0xc0>)
 8002bae:	2203      	movs	r2, #3
 8002bb0:	721a      	strb	r2, [r3, #8]
 8002bb2:	e7b1      	b.n	8002b18 <HAL_UART_RxCpltCallback+0xc>
					mode = 1;  // che do do line
 8002bb4:	4d05      	ldr	r5, [pc, #20]	; (8002bcc <HAL_UART_RxCpltCallback+0xc0>)
 8002bb6:	2401      	movs	r4, #1
 8002bb8:	722c      	strb	r4, [r5, #8]
					HAL_UART_Receive_DMA(&huart1,Rx_buff,1);
 8002bba:	4622      	mov	r2, r4
 8002bbc:	4904      	ldr	r1, [pc, #16]	; (8002bd0 <HAL_UART_RxCpltCallback+0xc4>)
 8002bbe:	4802      	ldr	r0, [pc, #8]	; (8002bc8 <HAL_UART_RxCpltCallback+0xbc>)
 8002bc0:	f7ff fc62 	bl	8002488 <HAL_UART_Receive_DMA>
					my_state = UART_APP;
 8002bc4:	702c      	strb	r4, [r5, #0]
 8002bc6:	e7a7      	b.n	8002b18 <HAL_UART_RxCpltCallback+0xc>
 8002bc8:	200001a0 	.word	0x200001a0
 8002bcc:	20000060 	.word	0x20000060
 8002bd0:	200001e4 	.word	0x200001e4

08002bd4 <control>:
{
 8002bd4:	b508      	push	{r3, lr}
		switch(Rx_buff[0])
 8002bd6:	4b19      	ldr	r3, [pc, #100]	; (8002c3c <control+0x68>)
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	3b62      	subs	r3, #98	; 0x62
 8002bdc:	2b10      	cmp	r3, #16
 8002bde:	d812      	bhi.n	8002c06 <control+0x32>
 8002be0:	e8df f003 	tbb	[pc, r3]
 8002be4:	11111123 	.word	0x11111123
 8002be8:	1111111b 	.word	0x1111111b
 8002bec:	11091111 	.word	0x11091111
 8002bf0:	11111111 	.word	0x11111111
 8002bf4:	12          	.byte	0x12
 8002bf5:	00          	.byte	0x00
			forward();
 8002bf6:	f7ff fe59 	bl	80028ac <forward>
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,100);   //speed of left motor
 8002bfa:	4b11      	ldr	r3, [pc, #68]	; (8002c40 <control+0x6c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2264      	movs	r2, #100	; 0x64
 8002c00:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,200);	// speed of right motor
 8002c02:	22c8      	movs	r2, #200	; 0xc8
 8002c04:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002c06:	bd08      	pop	{r3, pc}
			forward();
 8002c08:	f7ff fe50 	bl	80028ac <forward>
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,200);   //speed of left motor
 8002c0c:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <control+0x6c>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	22c8      	movs	r2, #200	; 0xc8
 8002c12:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,100);	// speed of right motor
 8002c14:	2264      	movs	r2, #100	; 0x64
 8002c16:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8002c18:	e7f5      	b.n	8002c06 <control+0x32>
			forward();
 8002c1a:	f7ff fe47 	bl	80028ac <forward>
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,210);   //speed of left motor
 8002c1e:	4b08      	ldr	r3, [pc, #32]	; (8002c40 <control+0x6c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	22d2      	movs	r2, #210	; 0xd2
 8002c24:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,210);	// speed of right motor
 8002c26:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8002c28:	e7ed      	b.n	8002c06 <control+0x32>
			backward();
 8002c2a:	f7ff fe5b 	bl	80028e4 <backward>
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,210);   //speed of left motor
 8002c2e:	4b04      	ldr	r3, [pc, #16]	; (8002c40 <control+0x6c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	22d2      	movs	r2, #210	; 0xd2
 8002c34:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,210);	// speed of right motor
 8002c36:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002c38:	e7e5      	b.n	8002c06 <control+0x32>
 8002c3a:	bf00      	nop
 8002c3c:	200001e4 	.word	0x200001e4
 8002c40:	20000094 	.word	0x20000094

08002c44 <HAL_TIM_PeriodElapsedCallback>:
	{
 8002c44:	b538      	push	{r3, r4, r5, lr}
	if (htim->Instance == TIM3)
 8002c46:	6802      	ldr	r2, [r0, #0]
 8002c48:	4b7a      	ldr	r3, [pc, #488]	; (8002e34 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d000      	beq.n	8002c50 <HAL_TIM_PeriodElapsedCallback+0xc>
	}
 8002c4e:	bd38      	pop	{r3, r4, r5, pc}
	if (mode ==1)
 8002c50:	4b79      	ldr	r3, [pc, #484]	; (8002e38 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8002c52:	7a1b      	ldrb	r3, [r3, #8]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d00c      	beq.n	8002c72 <HAL_TIM_PeriodElapsedCallback+0x2e>
		else if(mode ==2)
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	f000 80e7 	beq.w	8002e2c <HAL_TIM_PeriodElapsedCallback+0x1e8>
		else if(mode == 3 || mode == 0)
 8002c5e:	2b03      	cmp	r3, #3
 8002c60:	d001      	beq.n	8002c66 <HAL_TIM_PeriodElapsedCallback+0x22>
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1f3      	bne.n	8002c4e <HAL_TIM_PeriodElapsedCallback+0xa>
				__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,0);
 8002c66:	4b75      	ldr	r3, [pc, #468]	; (8002e3c <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	63da      	str	r2, [r3, #60]	; 0x3c
				__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,0);
 8002c6e:	641a      	str	r2, [r3, #64]	; 0x40
	}
 8002c70:	e7ed      	b.n	8002c4e <HAL_TIM_PeriodElapsedCallback+0xa>
		S[3] = HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5);
 8002c72:	4d73      	ldr	r5, [pc, #460]	; (8002e40 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8002c74:	2120      	movs	r1, #32
 8002c76:	4628      	mov	r0, r5
 8002c78:	f7fe fc8c 	bl	8001594 <HAL_GPIO_ReadPin>
 8002c7c:	4c71      	ldr	r4, [pc, #452]	; (8002e44 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002c7e:	70e0      	strb	r0, [r4, #3]
		S[2] = HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4);
 8002c80:	2110      	movs	r1, #16
 8002c82:	4628      	mov	r0, r5
 8002c84:	f7fe fc86 	bl	8001594 <HAL_GPIO_ReadPin>
 8002c88:	70a0      	strb	r0, [r4, #2]
		S[1] = HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3);
 8002c8a:	2108      	movs	r1, #8
 8002c8c:	4628      	mov	r0, r5
 8002c8e:	f7fe fc81 	bl	8001594 <HAL_GPIO_ReadPin>
 8002c92:	7060      	strb	r0, [r4, #1]
		S[0] = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_15);
 8002c94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c98:	486b      	ldr	r0, [pc, #428]	; (8002e48 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8002c9a:	f7fe fc7b 	bl	8001594 <HAL_GPIO_ReadPin>
 8002c9e:	7020      	strb	r0, [r4, #0]
		for(int i=0;i<=3;i++)
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	e000      	b.n	8002ca6 <HAL_TIM_PeriodElapsedCallback+0x62>
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	2b03      	cmp	r3, #3
 8002ca8:	dc0c      	bgt.n	8002cc4 <HAL_TIM_PeriodElapsedCallback+0x80>
			if(S[i]==0)
 8002caa:	4a66      	ldr	r2, [pc, #408]	; (8002e44 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002cac:	5cd2      	ldrb	r2, [r2, r3]
 8002cae:	2a00      	cmp	r2, #0
 8002cb0:	d1f8      	bne.n	8002ca4 <HAL_TIM_PeriodElapsedCallback+0x60>
				i_SumValuteIndexArry+=1;
 8002cb2:	4a61      	ldr	r2, [pc, #388]	; (8002e38 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8002cb4:	68d1      	ldr	r1, [r2, #12]
 8002cb6:	3101      	adds	r1, #1
 8002cb8:	60d1      	str	r1, [r2, #12]
				i_SumIndexArry+=(i+1);
 8002cba:	1c58      	adds	r0, r3, #1
 8002cbc:	6911      	ldr	r1, [r2, #16]
 8002cbe:	4401      	add	r1, r0
 8002cc0:	6111      	str	r1, [r2, #16]
 8002cc2:	e7ef      	b.n	8002ca4 <HAL_TIM_PeriodElapsedCallback+0x60>
		if(i_SumIndexArry==6)
 8002cc4:	4b5c      	ldr	r3, [pc, #368]	; (8002e38 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8002cc6:	6918      	ldr	r0, [r3, #16]
 8002cc8:	2806      	cmp	r0, #6
 8002cca:	d01d      	beq.n	8002d08 <HAL_TIM_PeriodElapsedCallback+0xc4>
		else if(i_SumIndexArry==9)
 8002ccc:	2809      	cmp	r0, #9
 8002cce:	d04b      	beq.n	8002d68 <HAL_TIM_PeriodElapsedCallback+0x124>
		else if(i_SumIndexArry==10)
 8002cd0:	280a      	cmp	r0, #10
 8002cd2:	d04d      	beq.n	8002d70 <HAL_TIM_PeriodElapsedCallback+0x12c>
		f_thamchieu=(float)i_SumIndexArry/i_SumValuteIndexArry;
 8002cd4:	f7fd ff12 	bl	8000afc <__aeabi_i2f>
 8002cd8:	4605      	mov	r5, r0
 8002cda:	4c57      	ldr	r4, [pc, #348]	; (8002e38 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8002cdc:	68e0      	ldr	r0, [r4, #12]
 8002cde:	f7fd ff0d 	bl	8000afc <__aeabi_i2f>
 8002ce2:	4601      	mov	r1, r0
 8002ce4:	4628      	mov	r0, r5
 8002ce6:	f7fe f811 	bl	8000d0c <__aeabi_fdiv>
 8002cea:	4605      	mov	r5, r0
 8002cec:	61e0      	str	r0, [r4, #28]
		i_SumIndexArry=0;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	6123      	str	r3, [r4, #16]
		i_SumValuteIndexArry=0;
 8002cf2:	60e3      	str	r3, [r4, #12]
		if(f_thamchieu==2)
 8002cf4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002cf8:	f7fe f8e8 	bl	8000ecc <__aeabi_fcmpeq>
 8002cfc:	2800      	cmp	r0, #0
 8002cfe:	d044      	beq.n	8002d8a <HAL_TIM_PeriodElapsedCallback+0x146>
			vitri=-1.2;
 8002d00:	4b52      	ldr	r3, [pc, #328]	; (8002e4c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002d02:	4a53      	ldr	r2, [pc, #332]	; (8002e50 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	e002      	b.n	8002d0e <HAL_TIM_PeriodElapsedCallback+0xca>
			vitri=-1.7;
 8002d08:	4b50      	ldr	r3, [pc, #320]	; (8002e4c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002d0a:	4a52      	ldr	r2, [pc, #328]	; (8002e54 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002d0c:	601a      	str	r2, [r3, #0]
		previtri=vitri;
 8002d0e:	4c4f      	ldr	r4, [pc, #316]	; (8002e4c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002d10:	6821      	ldr	r1, [r4, #0]
 8002d12:	4b49      	ldr	r3, [pc, #292]	; (8002e38 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8002d14:	6199      	str	r1, [r3, #24]
		result_PWM = PID_PROCESS(&PID_set_parameters,vitri,0);
 8002d16:	2500      	movs	r5, #0
 8002d18:	462a      	mov	r2, r5
 8002d1a:	484f      	ldr	r0, [pc, #316]	; (8002e58 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002d1c:	f7ff fd4e 	bl	80027bc <PID_PROCESS>
 8002d20:	4b4e      	ldr	r3, [pc, #312]	; (8002e5c <HAL_TIM_PeriodElapsedCallback+0x218>)
 8002d22:	6018      	str	r0, [r3, #0]
			if (vitri== 0)
 8002d24:	4629      	mov	r1, r5
 8002d26:	6820      	ldr	r0, [r4, #0]
 8002d28:	f7fe f8d0 	bl	8000ecc <__aeabi_fcmpeq>
 8002d2c:	2800      	cmp	r0, #0
 8002d2e:	d169      	bne.n	8002e04 <HAL_TIM_PeriodElapsedCallback+0x1c0>
			if (vitri > 0)
 8002d30:	2100      	movs	r1, #0
 8002d32:	4b46      	ldr	r3, [pc, #280]	; (8002e4c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002d34:	6818      	ldr	r0, [r3, #0]
 8002d36:	f7fe f8f1 	bl	8000f1c <__aeabi_fcmpgt>
 8002d3a:	2800      	cmp	r0, #0
 8002d3c:	d16a      	bne.n	8002e14 <HAL_TIM_PeriodElapsedCallback+0x1d0>
			if (vitri < 0)
 8002d3e:	2100      	movs	r1, #0
 8002d40:	4b42      	ldr	r3, [pc, #264]	; (8002e4c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002d42:	6818      	ldr	r0, [r3, #0]
 8002d44:	f7fe f8cc 	bl	8000ee0 <__aeabi_fcmplt>
 8002d48:	2800      	cmp	r0, #0
 8002d4a:	d080      	beq.n	8002c4e <HAL_TIM_PeriodElapsedCallback+0xa>
				forward();
 8002d4c:	f7ff fdae 	bl	80028ac <forward>
				__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,0);
 8002d50:	4b3a      	ldr	r3, [pc, #232]	; (8002e3c <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002d52:	681c      	ldr	r4, [r3, #0]
 8002d54:	2300      	movs	r3, #0
 8002d56:	63e3      	str	r3, [r4, #60]	; 0x3c
				__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,(result_PWM*-1));
 8002d58:	4b40      	ldr	r3, [pc, #256]	; (8002e5c <HAL_TIM_PeriodElapsedCallback+0x218>)
 8002d5a:	6818      	ldr	r0, [r3, #0]
 8002d5c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8002d60:	f7fe f8e6 	bl	8000f30 <__aeabi_f2uiz>
 8002d64:	6420      	str	r0, [r4, #64]	; 0x40
 8002d66:	e772      	b.n	8002c4e <HAL_TIM_PeriodElapsedCallback+0xa>
			vitri=1.7;
 8002d68:	4b38      	ldr	r3, [pc, #224]	; (8002e4c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002d6a:	4a3d      	ldr	r2, [pc, #244]	; (8002e60 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	e7ce      	b.n	8002d0e <HAL_TIM_PeriodElapsedCallback+0xca>
			dem++;
 8002d70:	4a31      	ldr	r2, [pc, #196]	; (8002e38 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8002d72:	6953      	ldr	r3, [r2, #20]
 8002d74:	3301      	adds	r3, #1
 8002d76:	6153      	str	r3, [r2, #20]
			if(dem==5)
 8002d78:	2b05      	cmp	r3, #5
 8002d7a:	d1c8      	bne.n	8002d0e <HAL_TIM_PeriodElapsedCallback+0xca>
				vitri=previtri;
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	6991      	ldr	r1, [r2, #24]
 8002d80:	4a32      	ldr	r2, [pc, #200]	; (8002e4c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002d82:	6011      	str	r1, [r2, #0]
				dem=0;
 8002d84:	2200      	movs	r2, #0
 8002d86:	615a      	str	r2, [r3, #20]
 8002d88:	e7c1      	b.n	8002d0e <HAL_TIM_PeriodElapsedCallback+0xca>
		else if(f_thamchieu==3)
 8002d8a:	4936      	ldr	r1, [pc, #216]	; (8002e64 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002d8c:	4628      	mov	r0, r5
 8002d8e:	f7fe f89d 	bl	8000ecc <__aeabi_fcmpeq>
 8002d92:	b118      	cbz	r0, 8002d9c <HAL_TIM_PeriodElapsedCallback+0x158>
			vitri=1.2;
 8002d94:	4b2d      	ldr	r3, [pc, #180]	; (8002e4c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002d96:	4a34      	ldr	r2, [pc, #208]	; (8002e68 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	e7b8      	b.n	8002d0e <HAL_TIM_PeriodElapsedCallback+0xca>
		else if(f_thamchieu==1)
 8002d9c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002da0:	4628      	mov	r0, r5
 8002da2:	f7fe f893 	bl	8000ecc <__aeabi_fcmpeq>
 8002da6:	b120      	cbz	r0, 8002db2 <HAL_TIM_PeriodElapsedCallback+0x16e>
			vitri=-2;
 8002da8:	4b28      	ldr	r3, [pc, #160]	; (8002e4c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002daa:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	e7ad      	b.n	8002d0e <HAL_TIM_PeriodElapsedCallback+0xca>
		else if(f_thamchieu==4)
 8002db2:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002db6:	4628      	mov	r0, r5
 8002db8:	f7fe f888 	bl	8000ecc <__aeabi_fcmpeq>
 8002dbc:	b120      	cbz	r0, 8002dc8 <HAL_TIM_PeriodElapsedCallback+0x184>
			vitri=2;
 8002dbe:	4b23      	ldr	r3, [pc, #140]	; (8002e4c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002dc0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	e7a2      	b.n	8002d0e <HAL_TIM_PeriodElapsedCallback+0xca>
		else if(f_thamchieu==1.5)
 8002dc8:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8002dcc:	4628      	mov	r0, r5
 8002dce:	f7fe f87d 	bl	8000ecc <__aeabi_fcmpeq>
 8002dd2:	b118      	cbz	r0, 8002ddc <HAL_TIM_PeriodElapsedCallback+0x198>
			vitri=-1.5;
 8002dd4:	4b1d      	ldr	r3, [pc, #116]	; (8002e4c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002dd6:	4a25      	ldr	r2, [pc, #148]	; (8002e6c <HAL_TIM_PeriodElapsedCallback+0x228>)
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	e798      	b.n	8002d0e <HAL_TIM_PeriodElapsedCallback+0xca>
		else if(f_thamchieu ==2.5)
 8002ddc:	4924      	ldr	r1, [pc, #144]	; (8002e70 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002dde:	4628      	mov	r0, r5
 8002de0:	f7fe f874 	bl	8000ecc <__aeabi_fcmpeq>
 8002de4:	b118      	cbz	r0, 8002dee <HAL_TIM_PeriodElapsedCallback+0x1aa>
			vitri=0;
 8002de6:	4b19      	ldr	r3, [pc, #100]	; (8002e4c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	e78f      	b.n	8002d0e <HAL_TIM_PeriodElapsedCallback+0xca>
		else if(f_thamchieu==3.5)
 8002dee:	4921      	ldr	r1, [pc, #132]	; (8002e74 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002df0:	4628      	mov	r0, r5
 8002df2:	f7fe f86b 	bl	8000ecc <__aeabi_fcmpeq>
 8002df6:	2800      	cmp	r0, #0
 8002df8:	d089      	beq.n	8002d0e <HAL_TIM_PeriodElapsedCallback+0xca>
			vitri=1.5;
 8002dfa:	4b14      	ldr	r3, [pc, #80]	; (8002e4c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002dfc:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	e784      	b.n	8002d0e <HAL_TIM_PeriodElapsedCallback+0xca>
				forward();
 8002e04:	f7ff fd52 	bl	80028ac <forward>
				__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,200);
 8002e08:	4b0c      	ldr	r3, [pc, #48]	; (8002e3c <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	22c8      	movs	r2, #200	; 0xc8
 8002e0e:	63da      	str	r2, [r3, #60]	; 0x3c
				__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,200);
 8002e10:	641a      	str	r2, [r3, #64]	; 0x40
 8002e12:	e78d      	b.n	8002d30 <HAL_TIM_PeriodElapsedCallback+0xec>
				forward();
 8002e14:	f7ff fd4a 	bl	80028ac <forward>
				__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,result_PWM);  //kenh 3 dong co trai
 8002e18:	4b08      	ldr	r3, [pc, #32]	; (8002e3c <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002e1a:	681c      	ldr	r4, [r3, #0]
 8002e1c:	4b0f      	ldr	r3, [pc, #60]	; (8002e5c <HAL_TIM_PeriodElapsedCallback+0x218>)
 8002e1e:	6818      	ldr	r0, [r3, #0]
 8002e20:	f7fe f886 	bl	8000f30 <__aeabi_f2uiz>
 8002e24:	63e0      	str	r0, [r4, #60]	; 0x3c
				__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,0);
 8002e26:	2300      	movs	r3, #0
 8002e28:	6423      	str	r3, [r4, #64]	; 0x40
 8002e2a:	e788      	b.n	8002d3e <HAL_TIM_PeriodElapsedCallback+0xfa>
				control();
 8002e2c:	f7ff fed2 	bl	8002bd4 <control>
 8002e30:	e70d      	b.n	8002c4e <HAL_TIM_PeriodElapsedCallback+0xa>
 8002e32:	bf00      	nop
 8002e34:	40000400 	.word	0x40000400
 8002e38:	20000060 	.word	0x20000060
 8002e3c:	20000094 	.word	0x20000094
 8002e40:	40010c00 	.word	0x40010c00
 8002e44:	200000d4 	.word	0x200000d4
 8002e48:	40010800 	.word	0x40010800
 8002e4c:	200001e0 	.word	0x200001e0
 8002e50:	bf99999a 	.word	0xbf99999a
 8002e54:	bfd9999a 	.word	0xbfd9999a
 8002e58:	20000008 	.word	0x20000008
 8002e5c:	20000090 	.word	0x20000090
 8002e60:	3fd9999a 	.word	0x3fd9999a
 8002e64:	40400000 	.word	0x40400000
 8002e68:	3f99999a 	.word	0x3f99999a
 8002e6c:	bfc00000 	.word	0xbfc00000
 8002e70:	40200000 	.word	0x40200000
 8002e74:	40600000 	.word	0x40600000

08002e78 <SystemClock_Config>:
{
 8002e78:	b530      	push	{r4, r5, lr}
 8002e7a:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e7c:	2400      	movs	r4, #0
 8002e7e:	9408      	str	r4, [sp, #32]
 8002e80:	9409      	str	r4, [sp, #36]	; 0x24
 8002e82:	940b      	str	r4, [sp, #44]	; 0x2c
 8002e84:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e86:	9401      	str	r4, [sp, #4]
 8002e88:	9402      	str	r4, [sp, #8]
 8002e8a:	9403      	str	r4, [sp, #12]
 8002e8c:	9404      	str	r4, [sp, #16]
 8002e8e:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e90:	2201      	movs	r2, #1
 8002e92:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e98:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e9a:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e9c:	2502      	movs	r5, #2
 8002e9e:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ea0:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002ea2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002ea6:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ea8:	a806      	add	r0, sp, #24
 8002eaa:	f7fe fb97 	bl	80015dc <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002eae:	230f      	movs	r3, #15
 8002eb0:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002eb2:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002eb4:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002eb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002eba:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ebc:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002ebe:	4629      	mov	r1, r5
 8002ec0:	a801      	add	r0, sp, #4
 8002ec2:	f7fe fdcb 	bl	8001a5c <HAL_RCC_ClockConfig>
}
 8002ec6:	b011      	add	sp, #68	; 0x44
 8002ec8:	bd30      	pop	{r4, r5, pc}
	...

08002ecc <main>:
{
 8002ecc:	b508      	push	{r3, lr}
  HAL_Init();
 8002ece:	f7fe f873 	bl	8000fb8 <HAL_Init>
  SystemClock_Config();
 8002ed2:	f7ff ffd1 	bl	8002e78 <SystemClock_Config>
  MX_GPIO_Init();
 8002ed6:	f7ff fd21 	bl	800291c <MX_GPIO_Init>
  MX_TIM4_Init();
 8002eda:	f7ff fd99 	bl	8002a10 <MX_TIM4_Init>
  MX_TIM3_Init();
 8002ede:	f7ff fd6d 	bl	80029bc <MX_TIM3_Init>
  MX_DMA_Init();
 8002ee2:	f7ff fddb 	bl	8002a9c <MX_DMA_Init>
	MX_USART1_UART_Init();
 8002ee6:	f7ff fdfb 	bl	8002ae0 <MX_USART1_UART_Init>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 8002eea:	4c09      	ldr	r4, [pc, #36]	; (8002f10 <main+0x44>)
 8002eec:	2108      	movs	r1, #8
 8002eee:	4620      	mov	r0, r4
 8002ef0:	f7ff f9a6 	bl	8002240 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 8002ef4:	210c      	movs	r1, #12
 8002ef6:	4620      	mov	r0, r4
 8002ef8:	f7ff f9a2 	bl	8002240 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8002efc:	4805      	ldr	r0, [pc, #20]	; (8002f14 <main+0x48>)
 8002efe:	f7fe ff38 	bl	8001d72 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_DMA(&huart1,Rx_buff,1);
 8002f02:	2201      	movs	r2, #1
 8002f04:	4904      	ldr	r1, [pc, #16]	; (8002f18 <main+0x4c>)
 8002f06:	4805      	ldr	r0, [pc, #20]	; (8002f1c <main+0x50>)
 8002f08:	f7ff fabe 	bl	8002488 <HAL_UART_Receive_DMA>
 8002f0c:	e7fe      	b.n	8002f0c <main+0x40>
 8002f0e:	bf00      	nop
 8002f10:	20000094 	.word	0x20000094
 8002f14:	200000d8 	.word	0x200000d8
 8002f18:	200001e4 	.word	0x200001e4
 8002f1c:	200001a0 	.word	0x200001a0

08002f20 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002f20:	4770      	bx	lr
	...

08002f24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f24:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002f26:	4b0e      	ldr	r3, [pc, #56]	; (8002f60 <HAL_MspInit+0x3c>)
 8002f28:	699a      	ldr	r2, [r3, #24]
 8002f2a:	f042 0201 	orr.w	r2, r2, #1
 8002f2e:	619a      	str	r2, [r3, #24]
 8002f30:	699a      	ldr	r2, [r3, #24]
 8002f32:	f002 0201 	and.w	r2, r2, #1
 8002f36:	9200      	str	r2, [sp, #0]
 8002f38:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f3a:	69da      	ldr	r2, [r3, #28]
 8002f3c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f40:	61da      	str	r2, [r3, #28]
 8002f42:	69db      	ldr	r3, [r3, #28]
 8002f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f48:	9301      	str	r3, [sp, #4]
 8002f4a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002f4c:	4a05      	ldr	r2, [pc, #20]	; (8002f64 <HAL_MspInit+0x40>)
 8002f4e:	6853      	ldr	r3, [r2, #4]
 8002f50:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002f54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f58:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f5a:	b002      	add	sp, #8
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	40021000 	.word	0x40021000
 8002f64:	40010000 	.word	0x40010000

08002f68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f68:	b500      	push	{lr}
 8002f6a:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM3)
 8002f6c:	6803      	ldr	r3, [r0, #0]
 8002f6e:	4a13      	ldr	r2, [pc, #76]	; (8002fbc <HAL_TIM_Base_MspInit+0x54>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d005      	beq.n	8002f80 <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8002f74:	4a12      	ldr	r2, [pc, #72]	; (8002fc0 <HAL_TIM_Base_MspInit+0x58>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d015      	beq.n	8002fa6 <HAL_TIM_Base_MspInit+0x3e>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002f7a:	b003      	add	sp, #12
 8002f7c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f80:	4b10      	ldr	r3, [pc, #64]	; (8002fc4 <HAL_TIM_Base_MspInit+0x5c>)
 8002f82:	69da      	ldr	r2, [r3, #28]
 8002f84:	f042 0202 	orr.w	r2, r2, #2
 8002f88:	61da      	str	r2, [r3, #28]
 8002f8a:	69db      	ldr	r3, [r3, #28]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002f94:	2200      	movs	r2, #0
 8002f96:	4611      	mov	r1, r2
 8002f98:	201d      	movs	r0, #29
 8002f9a:	f7fe f843 	bl	8001024 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002f9e:	201d      	movs	r0, #29
 8002fa0:	f7fe f874 	bl	800108c <HAL_NVIC_EnableIRQ>
 8002fa4:	e7e9      	b.n	8002f7a <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002fa6:	4b07      	ldr	r3, [pc, #28]	; (8002fc4 <HAL_TIM_Base_MspInit+0x5c>)
 8002fa8:	69da      	ldr	r2, [r3, #28]
 8002faa:	f042 0204 	orr.w	r2, r2, #4
 8002fae:	61da      	str	r2, [r3, #28]
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	f003 0304 	and.w	r3, r3, #4
 8002fb6:	9301      	str	r3, [sp, #4]
 8002fb8:	9b01      	ldr	r3, [sp, #4]
}
 8002fba:	e7de      	b.n	8002f7a <HAL_TIM_Base_MspInit+0x12>
 8002fbc:	40000400 	.word	0x40000400
 8002fc0:	40000800 	.word	0x40000800
 8002fc4:	40021000 	.word	0x40021000

08002fc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002fc8:	b500      	push	{lr}
 8002fca:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fcc:	2300      	movs	r3, #0
 8002fce:	9302      	str	r3, [sp, #8]
 8002fd0:	9303      	str	r3, [sp, #12]
 8002fd2:	9304      	str	r3, [sp, #16]
 8002fd4:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM4)
 8002fd6:	6802      	ldr	r2, [r0, #0]
 8002fd8:	4b0d      	ldr	r3, [pc, #52]	; (8003010 <HAL_TIM_MspPostInit+0x48>)
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d002      	beq.n	8002fe4 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002fde:	b007      	add	sp, #28
 8002fe0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fe4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002fe8:	699a      	ldr	r2, [r3, #24]
 8002fea:	f042 0208 	orr.w	r2, r2, #8
 8002fee:	619a      	str	r2, [r3, #24]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	f003 0308 	and.w	r3, r3, #8
 8002ff6:	9301      	str	r3, [sp, #4]
 8002ff8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ffa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ffe:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003000:	2302      	movs	r3, #2
 8003002:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003004:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003006:	a902      	add	r1, sp, #8
 8003008:	4802      	ldr	r0, [pc, #8]	; (8003014 <HAL_TIM_MspPostInit+0x4c>)
 800300a:	f7fe f9d7 	bl	80013bc <HAL_GPIO_Init>
}
 800300e:	e7e6      	b.n	8002fde <HAL_TIM_MspPostInit+0x16>
 8003010:	40000800 	.word	0x40000800
 8003014:	40010c00 	.word	0x40010c00

08003018 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003018:	b570      	push	{r4, r5, r6, lr}
 800301a:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800301c:	2300      	movs	r3, #0
 800301e:	9302      	str	r3, [sp, #8]
 8003020:	9303      	str	r3, [sp, #12]
 8003022:	9304      	str	r3, [sp, #16]
 8003024:	9305      	str	r3, [sp, #20]
  if(huart->Instance==USART1)
 8003026:	6802      	ldr	r2, [r0, #0]
 8003028:	4b31      	ldr	r3, [pc, #196]	; (80030f0 <HAL_UART_MspInit+0xd8>)
 800302a:	429a      	cmp	r2, r3
 800302c:	d001      	beq.n	8003032 <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800302e:	b006      	add	sp, #24
 8003030:	bd70      	pop	{r4, r5, r6, pc}
 8003032:	4604      	mov	r4, r0
    __HAL_RCC_USART1_CLK_ENABLE();
 8003034:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8003038:	699a      	ldr	r2, [r3, #24]
 800303a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800303e:	619a      	str	r2, [r3, #24]
 8003040:	699a      	ldr	r2, [r3, #24]
 8003042:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003046:	9200      	str	r2, [sp, #0]
 8003048:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800304a:	699a      	ldr	r2, [r3, #24]
 800304c:	f042 0204 	orr.w	r2, r2, #4
 8003050:	619a      	str	r2, [r3, #24]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	9301      	str	r3, [sp, #4]
 800305a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800305c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003060:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003062:	2302      	movs	r3, #2
 8003064:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003066:	2303      	movs	r3, #3
 8003068:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800306a:	4e22      	ldr	r6, [pc, #136]	; (80030f4 <HAL_UART_MspInit+0xdc>)
 800306c:	a902      	add	r1, sp, #8
 800306e:	4630      	mov	r0, r6
 8003070:	f7fe f9a4 	bl	80013bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003074:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003078:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800307a:	2500      	movs	r5, #0
 800307c:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307e:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003080:	a902      	add	r1, sp, #8
 8003082:	4630      	mov	r0, r6
 8003084:	f7fe f99a 	bl	80013bc <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003088:	481b      	ldr	r0, [pc, #108]	; (80030f8 <HAL_UART_MspInit+0xe0>)
 800308a:	4b1c      	ldr	r3, [pc, #112]	; (80030fc <HAL_UART_MspInit+0xe4>)
 800308c:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800308e:	6045      	str	r5, [r0, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003090:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003092:	2380      	movs	r3, #128	; 0x80
 8003094:	60c3      	str	r3, [r0, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003096:	6105      	str	r5, [r0, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003098:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800309a:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800309c:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800309e:	f7fe f82f 	bl	8001100 <HAL_DMA_Init>
 80030a2:	b9f0      	cbnz	r0, 80030e2 <HAL_UART_MspInit+0xca>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80030a4:	4b14      	ldr	r3, [pc, #80]	; (80030f8 <HAL_UART_MspInit+0xe0>)
 80030a6:	6363      	str	r3, [r4, #52]	; 0x34
 80030a8:	625c      	str	r4, [r3, #36]	; 0x24
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80030aa:	4815      	ldr	r0, [pc, #84]	; (8003100 <HAL_UART_MspInit+0xe8>)
 80030ac:	4b15      	ldr	r3, [pc, #84]	; (8003104 <HAL_UART_MspInit+0xec>)
 80030ae:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030b0:	2310      	movs	r3, #16
 80030b2:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030b4:	2300      	movs	r3, #0
 80030b6:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80030b8:	2280      	movs	r2, #128	; 0x80
 80030ba:	60c2      	str	r2, [r0, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030bc:	6103      	str	r3, [r0, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030be:	6143      	str	r3, [r0, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80030c0:	6183      	str	r3, [r0, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80030c2:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80030c4:	f7fe f81c 	bl	8001100 <HAL_DMA_Init>
 80030c8:	b970      	cbnz	r0, 80030e8 <HAL_UART_MspInit+0xd0>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80030ca:	4b0d      	ldr	r3, [pc, #52]	; (8003100 <HAL_UART_MspInit+0xe8>)
 80030cc:	6323      	str	r3, [r4, #48]	; 0x30
 80030ce:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80030d0:	2200      	movs	r2, #0
 80030d2:	4611      	mov	r1, r2
 80030d4:	2025      	movs	r0, #37	; 0x25
 80030d6:	f7fd ffa5 	bl	8001024 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80030da:	2025      	movs	r0, #37	; 0x25
 80030dc:	f7fd ffd6 	bl	800108c <HAL_NVIC_EnableIRQ>
}
 80030e0:	e7a5      	b.n	800302e <HAL_UART_MspInit+0x16>
      Error_Handler();
 80030e2:	f7ff ff1d 	bl	8002f20 <Error_Handler>
 80030e6:	e7dd      	b.n	80030a4 <HAL_UART_MspInit+0x8c>
      Error_Handler();
 80030e8:	f7ff ff1a 	bl	8002f20 <Error_Handler>
 80030ec:	e7ed      	b.n	80030ca <HAL_UART_MspInit+0xb2>
 80030ee:	bf00      	nop
 80030f0:	40013800 	.word	0x40013800
 80030f4:	40010800 	.word	0x40010800
 80030f8:	2000015c 	.word	0x2000015c
 80030fc:	40020058 	.word	0x40020058
 8003100:	20000118 	.word	0x20000118
 8003104:	40020044 	.word	0x40020044

08003108 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003108:	4770      	bx	lr

0800310a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800310a:	e7fe      	b.n	800310a <HardFault_Handler>

0800310c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800310c:	e7fe      	b.n	800310c <MemManage_Handler>

0800310e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800310e:	e7fe      	b.n	800310e <BusFault_Handler>

08003110 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003110:	e7fe      	b.n	8003110 <UsageFault_Handler>

08003112 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003112:	4770      	bx	lr

08003114 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003114:	4770      	bx	lr

08003116 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003116:	4770      	bx	lr

08003118 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003118:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800311a:	f7fd ff5f 	bl	8000fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800311e:	bd08      	pop	{r3, pc}

08003120 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003120:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003122:	4802      	ldr	r0, [pc, #8]	; (800312c <DMA1_Channel4_IRQHandler+0xc>)
 8003124:	f7fe f8a8 	bl	8001278 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003128:	bd08      	pop	{r3, pc}
 800312a:	bf00      	nop
 800312c:	20000118 	.word	0x20000118

08003130 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003130:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003132:	4802      	ldr	r0, [pc, #8]	; (800313c <DMA1_Channel5_IRQHandler+0xc>)
 8003134:	f7fe f8a0 	bl	8001278 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003138:	bd08      	pop	{r3, pc}
 800313a:	bf00      	nop
 800313c:	2000015c 	.word	0x2000015c

08003140 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003140:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003142:	4802      	ldr	r0, [pc, #8]	; (800314c <TIM3_IRQHandler+0xc>)
 8003144:	f7fe fe2b 	bl	8001d9e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003148:	bd08      	pop	{r3, pc}
 800314a:	bf00      	nop
 800314c:	200000d8 	.word	0x200000d8

08003150 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003150:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003152:	4802      	ldr	r0, [pc, #8]	; (800315c <USART1_IRQHandler+0xc>)
 8003154:	f7ff fa9a 	bl	800268c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003158:	bd08      	pop	{r3, pc}
 800315a:	bf00      	nop
 800315c:	200001a0 	.word	0x200001a0

08003160 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003160:	4b0f      	ldr	r3, [pc, #60]	; (80031a0 <SystemInit+0x40>)
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	f042 0201 	orr.w	r2, r2, #1
 8003168:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800316a:	6859      	ldr	r1, [r3, #4]
 800316c:	4a0d      	ldr	r2, [pc, #52]	; (80031a4 <SystemInit+0x44>)
 800316e:	400a      	ands	r2, r1
 8003170:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003178:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800317c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003184:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800318c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800318e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003192:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003194:	4b04      	ldr	r3, [pc, #16]	; (80031a8 <SystemInit+0x48>)
 8003196:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800319a:	609a      	str	r2, [r3, #8]
#endif 
}
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	40021000 	.word	0x40021000
 80031a4:	f8ff0000 	.word	0xf8ff0000
 80031a8:	e000ed00 	.word	0xe000ed00

080031ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80031ac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80031ae:	e003      	b.n	80031b8 <LoopCopyDataInit>

080031b0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80031b0:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80031b2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80031b4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80031b6:	3104      	adds	r1, #4

080031b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80031b8:	480a      	ldr	r0, [pc, #40]	; (80031e4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80031ba:	4b0b      	ldr	r3, [pc, #44]	; (80031e8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80031bc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80031be:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80031c0:	d3f6      	bcc.n	80031b0 <CopyDataInit>
  ldr r2, =_sbss
 80031c2:	4a0a      	ldr	r2, [pc, #40]	; (80031ec <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80031c4:	e002      	b.n	80031cc <LoopFillZerobss>

080031c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80031c6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80031c8:	f842 3b04 	str.w	r3, [r2], #4

080031cc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80031cc:	4b08      	ldr	r3, [pc, #32]	; (80031f0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80031ce:	429a      	cmp	r2, r3
  bcc FillZerobss
 80031d0:	d3f9      	bcc.n	80031c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80031d2:	f7ff ffc5 	bl	8003160 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031d6:	f000 f80f 	bl	80031f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80031da:	f7ff fe77 	bl	8002ecc <main>
  bx lr
 80031de:	4770      	bx	lr
  ldr r3, =_sidata
 80031e0:	0800328c 	.word	0x0800328c
  ldr r0, =_sdata
 80031e4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80031e8:	20000044 	.word	0x20000044
  ldr r2, =_sbss
 80031ec:	20000044 	.word	0x20000044
  ldr r3, = _ebss
 80031f0:	200001f0 	.word	0x200001f0

080031f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80031f4:	e7fe      	b.n	80031f4 <ADC1_2_IRQHandler>
	...

080031f8 <__libc_init_array>:
 80031f8:	b570      	push	{r4, r5, r6, lr}
 80031fa:	2500      	movs	r5, #0
 80031fc:	4e0c      	ldr	r6, [pc, #48]	; (8003230 <__libc_init_array+0x38>)
 80031fe:	4c0d      	ldr	r4, [pc, #52]	; (8003234 <__libc_init_array+0x3c>)
 8003200:	1ba4      	subs	r4, r4, r6
 8003202:	10a4      	asrs	r4, r4, #2
 8003204:	42a5      	cmp	r5, r4
 8003206:	d109      	bne.n	800321c <__libc_init_array+0x24>
 8003208:	f000 f81a 	bl	8003240 <_init>
 800320c:	2500      	movs	r5, #0
 800320e:	4e0a      	ldr	r6, [pc, #40]	; (8003238 <__libc_init_array+0x40>)
 8003210:	4c0a      	ldr	r4, [pc, #40]	; (800323c <__libc_init_array+0x44>)
 8003212:	1ba4      	subs	r4, r4, r6
 8003214:	10a4      	asrs	r4, r4, #2
 8003216:	42a5      	cmp	r5, r4
 8003218:	d105      	bne.n	8003226 <__libc_init_array+0x2e>
 800321a:	bd70      	pop	{r4, r5, r6, pc}
 800321c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003220:	4798      	blx	r3
 8003222:	3501      	adds	r5, #1
 8003224:	e7ee      	b.n	8003204 <__libc_init_array+0xc>
 8003226:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800322a:	4798      	blx	r3
 800322c:	3501      	adds	r5, #1
 800322e:	e7f2      	b.n	8003216 <__libc_init_array+0x1e>
 8003230:	08003284 	.word	0x08003284
 8003234:	08003284 	.word	0x08003284
 8003238:	08003284 	.word	0x08003284
 800323c:	08003288 	.word	0x08003288

08003240 <_init>:
 8003240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003242:	bf00      	nop
 8003244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003246:	bc08      	pop	{r3}
 8003248:	469e      	mov	lr, r3
 800324a:	4770      	bx	lr

0800324c <_fini>:
 800324c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800324e:	bf00      	nop
 8003250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003252:	bc08      	pop	{r3}
 8003254:	469e      	mov	lr, r3
 8003256:	4770      	bx	lr
